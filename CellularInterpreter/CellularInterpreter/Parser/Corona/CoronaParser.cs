//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Grammar/Corona.g4 by ANTLR 4.7.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.2")]
[System.CLSCompliant(false)]
public partial class CoronaParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		DEFAULT=32, ID=33, INT=34, STRING=35, COMMENT=36, WS=37, CR=38, NL=39, 
		CRNL=40, TAB=41;
	public const int
		RULE_main = 0, RULE_grid = 1, RULE_states = 2, RULE_initial = 3, RULE_rules = 4, 
		RULE_memberDeclaration = 5, RULE_gridDeclaration = 6, RULE_statement = 7, 
		RULE_matchStatement = 8, RULE_matchElement = 9, RULE_iterationStatement = 10, 
		RULE_assignmentStatement = 11, RULE_compoundStatement = 12, RULE_returnStatement = 13, 
		RULE_returnMember = 14, RULE_caseStatement = 15, RULE_caseValue = 16, 
		RULE_expr = 17, RULE_operator = 18, RULE_comparisonOperator = 19, RULE_memberValue = 20, 
		RULE_member = 21, RULE_gridPoint = 22, RULE_arrowValue = 23, RULE_intValue = 24, 
		RULE_stringValue = 25, RULE_identifierValue = 26;
	public static readonly string[] ruleNames = {
		"main", "grid", "states", "initial", "rules", "memberDeclaration", "gridDeclaration", 
		"statement", "matchStatement", "matchElement", "iterationStatement", "assignmentStatement", 
		"compoundStatement", "returnStatement", "returnMember", "caseStatement", 
		"caseValue", "expr", "operator", "comparisonOperator", "memberValue", 
		"member", "gridPoint", "arrowValue", "intValue", "stringValue", "identifierValue"
	};

	private static readonly string[] _LiteralNames = {
		null, "'GRID'", "'{'", "'}'", "'STATES'", "','", "'INITIAL'", "'RULES'", 
		"':'", "';'", "'match'", "'('", "')'", "'while'", "'='", "'.'", "'return'", 
		"'['", "']'", "'+'", "'-'", "'*'", "'/'", "'=='", "'!='", "'<'", "'>'", 
		"'<='", "'>='", "'.state'", "'grid['", "'->'", "'_'", null, null, null, 
		null, null, "'\r'", "'\n'", "'\r\n'", "'\t'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, "DEFAULT", "ID", "INT", 
		"STRING", "COMMENT", "WS", "CR", "NL", "CRNL", "TAB"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Corona.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static CoronaParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public CoronaParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public CoronaParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class MainContext : ParserRuleContext {
		public GridContext grid() {
			return GetRuleContext<GridContext>(0);
		}
		public InitialContext initial() {
			return GetRuleContext<InitialContext>(0);
		}
		public RulesContext rules() {
			return GetRuleContext<RulesContext>(0);
		}
		public StatesContext[] states() {
			return GetRuleContexts<StatesContext>();
		}
		public StatesContext states(int i) {
			return GetRuleContext<StatesContext>(i);
		}
		public MainContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_main; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.EnterMain(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.ExitMain(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoronaVisitor<TResult> typedVisitor = visitor as ICoronaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMain(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MainContext main() {
		MainContext _localctx = new MainContext(Context, State);
		EnterRule(_localctx, 0, RULE_main);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 54; grid();
			State = 56;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 55; states();
				}
				}
				State = 58;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==T__3 );
			State = 60; initial();
			State = 61; rules();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GridContext : ParserRuleContext {
		public GridDeclarationContext[] gridDeclaration() {
			return GetRuleContexts<GridDeclarationContext>();
		}
		public GridDeclarationContext gridDeclaration(int i) {
			return GetRuleContext<GridDeclarationContext>(i);
		}
		public GridContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_grid; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.EnterGrid(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.ExitGrid(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoronaVisitor<TResult> typedVisitor = visitor as ICoronaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGrid(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GridContext grid() {
		GridContext _localctx = new GridContext(Context, State);
		EnterRule(_localctx, 2, RULE_grid);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 63; Match(T__0);
			State = 64; Match(T__1);
			State = 65; gridDeclaration();
			State = 66; gridDeclaration();
			State = 67; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatesContext : ParserRuleContext {
		public ITerminalNode[] ID() { return GetTokens(CoronaParser.ID); }
		public ITerminalNode ID(int i) {
			return GetToken(CoronaParser.ID, i);
		}
		public MemberDeclarationContext[] memberDeclaration() {
			return GetRuleContexts<MemberDeclarationContext>();
		}
		public MemberDeclarationContext memberDeclaration(int i) {
			return GetRuleContext<MemberDeclarationContext>(i);
		}
		public StatesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_states; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.EnterStates(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.ExitStates(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoronaVisitor<TResult> typedVisitor = visitor as ICoronaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStates(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatesContext states() {
		StatesContext _localctx = new StatesContext(Context, State);
		EnterRule(_localctx, 4, RULE_states);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 69; Match(T__3);
			State = 70; Match(ID);
			State = 75;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__4) {
				{
				{
				State = 71; Match(T__4);
				State = 72; Match(ID);
				}
				}
				State = 77;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 78; Match(T__1);
			State = 82;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ID) {
				{
				{
				State = 79; memberDeclaration();
				}
				}
				State = 84;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 85; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitialContext : ParserRuleContext {
		public CompoundStatementContext compoundStatement() {
			return GetRuleContext<CompoundStatementContext>(0);
		}
		public InitialContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initial; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.EnterInitial(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.ExitInitial(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoronaVisitor<TResult> typedVisitor = visitor as ICoronaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInitial(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InitialContext initial() {
		InitialContext _localctx = new InitialContext(Context, State);
		EnterRule(_localctx, 6, RULE_initial);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 87; Match(T__5);
			State = 88; compoundStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RulesContext : ParserRuleContext {
		public CompoundStatementContext compoundStatement() {
			return GetRuleContext<CompoundStatementContext>(0);
		}
		public RulesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rules; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.EnterRules(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.ExitRules(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoronaVisitor<TResult> typedVisitor = visitor as ICoronaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRules(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RulesContext rules() {
		RulesContext _localctx = new RulesContext(Context, State);
		EnterRule(_localctx, 8, RULE_rules);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 90; Match(T__6);
			State = 91; compoundStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberDeclarationContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(CoronaParser.ID, 0); }
		public MemberValueContext[] memberValue() {
			return GetRuleContexts<MemberValueContext>();
		}
		public MemberValueContext memberValue(int i) {
			return GetRuleContext<MemberValueContext>(i);
		}
		public MemberDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.EnterMemberDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.ExitMemberDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoronaVisitor<TResult> typedVisitor = visitor as ICoronaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemberDeclarationContext memberDeclaration() {
		MemberDeclarationContext _localctx = new MemberDeclarationContext(Context, State);
		EnterRule(_localctx, 10, RULE_memberDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 93; Match(ID);
			State = 94; Match(T__7);
			State = 95; memberValue();
			State = 100;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__4) {
				{
				{
				State = 96; Match(T__4);
				State = 97; memberValue();
				}
				}
				State = 102;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 103; Match(T__8);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GridDeclarationContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(CoronaParser.ID, 0); }
		public ITerminalNode INT() { return GetToken(CoronaParser.INT, 0); }
		public GridDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_gridDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.EnterGridDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.ExitGridDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoronaVisitor<TResult> typedVisitor = visitor as ICoronaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGridDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GridDeclarationContext gridDeclaration() {
		GridDeclarationContext _localctx = new GridDeclarationContext(Context, State);
		EnterRule(_localctx, 12, RULE_gridDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 105; Match(ID);
			State = 106; Match(T__7);
			State = 107; Match(INT);
			State = 108; Match(T__8);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public IterationStatementContext iterationStatement() {
			return GetRuleContext<IterationStatementContext>(0);
		}
		public AssignmentStatementContext assignmentStatement() {
			return GetRuleContext<AssignmentStatementContext>(0);
		}
		public CompoundStatementContext compoundStatement() {
			return GetRuleContext<CompoundStatementContext>(0);
		}
		public ReturnStatementContext returnStatement() {
			return GetRuleContext<ReturnStatementContext>(0);
		}
		public MatchStatementContext matchStatement() {
			return GetRuleContext<MatchStatementContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoronaVisitor<TResult> typedVisitor = visitor as ICoronaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 14, RULE_statement);
		try {
			State = 115;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__12:
				EnterOuterAlt(_localctx, 1);
				{
				State = 110; iterationStatement();
				}
				break;
			case T__14:
			case T__29:
			case ID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 111; assignmentStatement();
				}
				break;
			case T__1:
				EnterOuterAlt(_localctx, 3);
				{
				State = 112; compoundStatement();
				}
				break;
			case T__15:
				EnterOuterAlt(_localctx, 4);
				{
				State = 113; returnStatement();
				}
				break;
			case T__9:
				EnterOuterAlt(_localctx, 5);
				{
				State = 114; matchStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MatchStatementContext : ParserRuleContext {
		public MatchElementContext[] matchElement() {
			return GetRuleContexts<MatchElementContext>();
		}
		public MatchElementContext matchElement(int i) {
			return GetRuleContext<MatchElementContext>(i);
		}
		public CaseStatementContext[] caseStatement() {
			return GetRuleContexts<CaseStatementContext>();
		}
		public CaseStatementContext caseStatement(int i) {
			return GetRuleContext<CaseStatementContext>(i);
		}
		public MatchStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_matchStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.EnterMatchStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.ExitMatchStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoronaVisitor<TResult> typedVisitor = visitor as ICoronaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMatchStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MatchStatementContext matchStatement() {
		MatchStatementContext _localctx = new MatchStatementContext(Context, State);
		EnterRule(_localctx, 16, RULE_matchStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 117; Match(T__9);
			State = 118; Match(T__10);
			State = 119; matchElement();
			State = 124;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__4) {
				{
				{
				State = 120; Match(T__4);
				State = 121; matchElement();
				}
				}
				State = 126;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 127; Match(T__11);
			State = 128; Match(T__1);
			State = 130;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 129; caseStatement();
				}
				}
				State = 132;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==T__16 );
			State = 134; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MatchElementContext : ParserRuleContext {
		public MemberContext member() {
			return GetRuleContext<MemberContext>(0);
		}
		public GridPointContext gridPoint() {
			return GetRuleContext<GridPointContext>(0);
		}
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public MatchElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_matchElement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.EnterMatchElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.ExitMatchElement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoronaVisitor<TResult> typedVisitor = visitor as ICoronaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMatchElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MatchElementContext matchElement() {
		MatchElementContext _localctx = new MatchElementContext(Context, State);
		EnterRule(_localctx, 18, RULE_matchElement);
		try {
			State = 139;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 136; member();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 137; gridPoint();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 138; expr(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IterationStatementContext : ParserRuleContext {
		public ExprContext conditioner;
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public IterationStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iterationStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.EnterIterationStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.ExitIterationStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoronaVisitor<TResult> typedVisitor = visitor as ICoronaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIterationStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IterationStatementContext iterationStatement() {
		IterationStatementContext _localctx = new IterationStatementContext(Context, State);
		EnterRule(_localctx, 20, RULE_iterationStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 141; Match(T__12);
			State = 142; Match(T__10);
			State = 143; _localctx.conditioner = expr(0);
			State = 144; Match(T__11);
			State = 145; statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentStatementContext : ParserRuleContext {
		public AssignmentStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentStatement; } }
	 
		public AssignmentStatementContext() { }
		public virtual void CopyFrom(AssignmentStatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class GridAssignStatementContext : AssignmentStatementContext {
		public GridPointContext gridPoint() {
			return GetRuleContext<GridPointContext>(0);
		}
		public ITerminalNode ID() { return GetToken(CoronaParser.ID, 0); }
		public GridAssignStatementContext(AssignmentStatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.EnterGridAssignStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.ExitGridAssignStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoronaVisitor<TResult> typedVisitor = visitor as ICoronaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGridAssignStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdentifierAssignStatementContext : AssignmentStatementContext {
		public IdentifierValueContext identifierValue() {
			return GetRuleContext<IdentifierValueContext>(0);
		}
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode STRING() { return GetToken(CoronaParser.STRING, 0); }
		public IdentifierAssignStatementContext(AssignmentStatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.EnterIdentifierAssignStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.ExitIdentifierAssignStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoronaVisitor<TResult> typedVisitor = visitor as ICoronaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierAssignStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MemberAssignStatementContext : AssignmentStatementContext {
		public IdentifierValueContext identifierValue() {
			return GetRuleContext<IdentifierValueContext>(0);
		}
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode STRING() { return GetToken(CoronaParser.STRING, 0); }
		public GridPointContext gridPoint() {
			return GetRuleContext<GridPointContext>(0);
		}
		public MemberAssignStatementContext(AssignmentStatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.EnterMemberAssignStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.ExitMemberAssignStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoronaVisitor<TResult> typedVisitor = visitor as ICoronaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberAssignStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentStatementContext assignmentStatement() {
		AssignmentStatementContext _localctx = new AssignmentStatementContext(Context, State);
		EnterRule(_localctx, 22, RULE_assignmentStatement);
		int _la;
		try {
			State = 172;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				_localctx = new GridAssignStatementContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 147; gridPoint();
				State = 148; Match(T__13);
				State = 149; Match(ID);
				State = 150; Match(T__8);
				}
				break;
			case 2:
				_localctx = new IdentifierAssignStatementContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 152; identifierValue();
				State = 153; Match(T__13);
				State = 156;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__14:
				case T__19:
				case ID:
				case INT:
					{
					State = 154; expr(0);
					}
					break;
				case STRING:
					{
					State = 155; Match(STRING);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 158; Match(T__8);
				}
				break;
			case 3:
				_localctx = new MemberAssignStatementContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 161;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__29) {
					{
					State = 160; gridPoint();
					}
				}

				State = 163; Match(T__14);
				State = 164; identifierValue();
				State = 165; Match(T__13);
				State = 168;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__14:
				case T__19:
				case ID:
				case INT:
					{
					State = 166; expr(0);
					}
					break;
				case STRING:
					{
					State = 167; Match(STRING);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 170; Match(T__8);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompoundStatementContext : ParserRuleContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public CompoundStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compoundStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.EnterCompoundStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.ExitCompoundStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoronaVisitor<TResult> typedVisitor = visitor as ICoronaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompoundStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompoundStatementContext compoundStatement() {
		CompoundStatementContext _localctx = new CompoundStatementContext(Context, State);
		EnterRule(_localctx, 24, RULE_compoundStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 174; Match(T__1);
			State = 178;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__1) | (1L << T__9) | (1L << T__12) | (1L << T__14) | (1L << T__15) | (1L << T__29) | (1L << ID))) != 0)) {
				{
				{
				State = 175; statement();
				}
				}
				State = 180;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 181; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStatementContext : ParserRuleContext {
		public ReturnStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStatement; } }
	 
		public ReturnStatementContext() { }
		public virtual void CopyFrom(ReturnStatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SimpleReturnContext : ReturnStatementContext {
		public IdentifierValueContext identifierValue() {
			return GetRuleContext<IdentifierValueContext>(0);
		}
		public SimpleReturnContext(ReturnStatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.EnterSimpleReturn(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.ExitSimpleReturn(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoronaVisitor<TResult> typedVisitor = visitor as ICoronaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleReturn(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AdvancedReturnContext : ReturnStatementContext {
		public IdentifierValueContext identifierValue() {
			return GetRuleContext<IdentifierValueContext>(0);
		}
		public ReturnMemberContext[] returnMember() {
			return GetRuleContexts<ReturnMemberContext>();
		}
		public ReturnMemberContext returnMember(int i) {
			return GetRuleContext<ReturnMemberContext>(i);
		}
		public AdvancedReturnContext(ReturnStatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.EnterAdvancedReturn(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.ExitAdvancedReturn(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoronaVisitor<TResult> typedVisitor = visitor as ICoronaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdvancedReturn(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStatementContext returnStatement() {
		ReturnStatementContext _localctx = new ReturnStatementContext(Context, State);
		EnterRule(_localctx, 26, RULE_returnStatement);
		int _la;
		try {
			State = 200;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
			case 1:
				_localctx = new SimpleReturnContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 183; Match(T__15);
				State = 184; identifierValue();
				State = 185; Match(T__8);
				}
				break;
			case 2:
				_localctx = new AdvancedReturnContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 187; Match(T__15);
				State = 188; identifierValue();
				State = 189; Match(T__1);
				State = 190; returnMember();
				State = 195;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__4) {
					{
					{
					State = 191; Match(T__4);
					State = 192; returnMember();
					}
					}
					State = 197;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 198; Match(T__2);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnMemberContext : ParserRuleContext {
		public IdentifierValueContext identifierValue() {
			return GetRuleContext<IdentifierValueContext>(0);
		}
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode STRING() { return GetToken(CoronaParser.STRING, 0); }
		public ReturnMemberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnMember; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.EnterReturnMember(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.ExitReturnMember(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoronaVisitor<TResult> typedVisitor = visitor as ICoronaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnMember(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnMemberContext returnMember() {
		ReturnMemberContext _localctx = new ReturnMemberContext(Context, State);
		EnterRule(_localctx, 28, RULE_returnMember);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 202; identifierValue();
			State = 203; Match(T__7);
			State = 206;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__14:
			case T__19:
			case ID:
			case INT:
				{
				State = 204; expr(0);
				}
				break;
			case STRING:
				{
				State = 205; Match(STRING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseStatementContext : ParserRuleContext {
		public CaseValueContext[] caseValue() {
			return GetRuleContexts<CaseValueContext>();
		}
		public CaseValueContext caseValue(int i) {
			return GetRuleContext<CaseValueContext>(i);
		}
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public CaseStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.EnterCaseStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.ExitCaseStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoronaVisitor<TResult> typedVisitor = visitor as ICoronaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CaseStatementContext caseStatement() {
		CaseStatementContext _localctx = new CaseStatementContext(Context, State);
		EnterRule(_localctx, 30, RULE_caseStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 208; Match(T__16);
			State = 209; caseValue();
			State = 214;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__4) {
				{
				{
				State = 210; Match(T__4);
				State = 211; caseValue();
				}
				}
				State = 216;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 217; Match(T__17);
			State = 218; statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseValueContext : ParserRuleContext {
		public CaseValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseValue; } }
	 
		public CaseValueContext() { }
		public virtual void CopyFrom(CaseValueContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class DefaultCaseValueContext : CaseValueContext {
		public ITerminalNode DEFAULT() { return GetToken(CoronaParser.DEFAULT, 0); }
		public DefaultCaseValueContext(CaseValueContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.EnterDefaultCaseValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.ExitDefaultCaseValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoronaVisitor<TResult> typedVisitor = visitor as ICoronaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefaultCaseValue(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MemberCaseValueContext : CaseValueContext {
		public MemberValueContext memberValue() {
			return GetRuleContext<MemberValueContext>(0);
		}
		public MemberCaseValueContext(CaseValueContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.EnterMemberCaseValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.ExitMemberCaseValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoronaVisitor<TResult> typedVisitor = visitor as ICoronaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberCaseValue(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdentifierCaseValueContext : CaseValueContext {
		public IdentifierValueContext identifierValue() {
			return GetRuleContext<IdentifierValueContext>(0);
		}
		public IdentifierCaseValueContext(CaseValueContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.EnterIdentifierCaseValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.ExitIdentifierCaseValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoronaVisitor<TResult> typedVisitor = visitor as ICoronaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierCaseValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CaseValueContext caseValue() {
		CaseValueContext _localctx = new CaseValueContext(Context, State);
		EnterRule(_localctx, 32, RULE_caseValue);
		try {
			State = 223;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__19:
			case INT:
			case STRING:
				_localctx = new MemberCaseValueContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 220; memberValue();
				}
				break;
			case ID:
				_localctx = new IdentifierCaseValueContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 221; identifierValue();
				}
				break;
			case DEFAULT:
				_localctx = new DefaultCaseValueContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 222; Match(DEFAULT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
	 
		public ExprContext() { }
		public virtual void CopyFrom(ExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NumberExprContext : ExprContext {
		public IntValueContext intValue() {
			return GetRuleContext<IntValueContext>(0);
		}
		public NumberExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.EnterNumberExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.ExitNumberExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoronaVisitor<TResult> typedVisitor = visitor as ICoronaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumberExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ComparisonExprContext : ExprContext {
		public ExprContext left;
		public ComparisonOperatorContext op;
		public ExprContext right;
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ComparisonOperatorContext comparisonOperator() {
			return GetRuleContext<ComparisonOperatorContext>(0);
		}
		public ComparisonExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.EnterComparisonExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.ExitComparisonExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoronaVisitor<TResult> typedVisitor = visitor as ICoronaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparisonExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdentifierExprContext : ExprContext {
		public IdentifierValueContext identifierValue() {
			return GetRuleContext<IdentifierValueContext>(0);
		}
		public IdentifierExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.EnterIdentifierExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.ExitIdentifierExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoronaVisitor<TResult> typedVisitor = visitor as ICoronaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class InfixExprContext : ExprContext {
		public ExprContext left;
		public OperatorContext op;
		public ExprContext right;
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public OperatorContext @operator() {
			return GetRuleContext<OperatorContext>(0);
		}
		public InfixExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.EnterInfixExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.ExitInfixExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoronaVisitor<TResult> typedVisitor = visitor as ICoronaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInfixExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(Context, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 34;
		EnterRecursionRule(_localctx, 34, RULE_expr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 231;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__19:
			case INT:
				{
				_localctx = new NumberExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 226; intValue();
				}
				break;
			case T__14:
			case ID:
				{
				_localctx = new IdentifierExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 228;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__14) {
					{
					State = 227; Match(T__14);
					}
				}

				State = 230; identifierValue();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 243;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 241;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
					case 1:
						{
						_localctx = new InfixExprContext(new ExprContext(_parentctx, _parentState));
						((InfixExprContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 233;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 234; ((InfixExprContext)_localctx).op = @operator();
						State = 235; ((InfixExprContext)_localctx).right = expr(3);
						}
						break;
					case 2:
						{
						_localctx = new ComparisonExprContext(new ExprContext(_parentctx, _parentState));
						((ComparisonExprContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 237;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 238; ((ComparisonExprContext)_localctx).op = comparisonOperator();
						State = 239; ((ComparisonExprContext)_localctx).right = expr(2);
						}
						break;
					}
					} 
				}
				State = 245;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class OperatorContext : ParserRuleContext {
		public OperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.EnterOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.ExitOperator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoronaVisitor<TResult> typedVisitor = visitor as ICoronaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorContext @operator() {
		OperatorContext _localctx = new OperatorContext(Context, State);
		EnterRule(_localctx, 36, RULE_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 246;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__18) | (1L << T__19) | (1L << T__20) | (1L << T__21))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComparisonOperatorContext : ParserRuleContext {
		public ComparisonOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparisonOperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.EnterComparisonOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.ExitComparisonOperator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoronaVisitor<TResult> typedVisitor = visitor as ICoronaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparisonOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComparisonOperatorContext comparisonOperator() {
		ComparisonOperatorContext _localctx = new ComparisonOperatorContext(Context, State);
		EnterRule(_localctx, 38, RULE_comparisonOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 248;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__22) | (1L << T__23) | (1L << T__24) | (1L << T__25) | (1L << T__26) | (1L << T__27))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberValueContext : ParserRuleContext {
		public ArrowValueContext arrowValue() {
			return GetRuleContext<ArrowValueContext>(0);
		}
		public IntValueContext intValue() {
			return GetRuleContext<IntValueContext>(0);
		}
		public StringValueContext stringValue() {
			return GetRuleContext<StringValueContext>(0);
		}
		public MemberValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.EnterMemberValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.ExitMemberValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoronaVisitor<TResult> typedVisitor = visitor as ICoronaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemberValueContext memberValue() {
		MemberValueContext _localctx = new MemberValueContext(Context, State);
		EnterRule(_localctx, 40, RULE_memberValue);
		try {
			State = 253;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,22,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 250; arrowValue();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 251; intValue();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 252; stringValue();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberContext : ParserRuleContext {
		public IdentifierValueContext identifierValue() {
			return GetRuleContext<IdentifierValueContext>(0);
		}
		public MemberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_member; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.EnterMember(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.ExitMember(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoronaVisitor<TResult> typedVisitor = visitor as ICoronaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMember(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemberContext member() {
		MemberContext _localctx = new MemberContext(Context, State);
		EnterRule(_localctx, 42, RULE_member);
		try {
			State = 258;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__28:
				EnterOuterAlt(_localctx, 1);
				{
				State = 255; Match(T__28);
				}
				break;
			case T__14:
				EnterOuterAlt(_localctx, 2);
				{
				State = 256; Match(T__14);
				State = 257; identifierValue();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GridPointContext : ParserRuleContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public MemberContext member() {
			return GetRuleContext<MemberContext>(0);
		}
		public GridPointContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_gridPoint; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.EnterGridPoint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.ExitGridPoint(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoronaVisitor<TResult> typedVisitor = visitor as ICoronaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGridPoint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GridPointContext gridPoint() {
		GridPointContext _localctx = new GridPointContext(Context, State);
		EnterRule(_localctx, 44, RULE_gridPoint);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 260; Match(T__29);
			State = 261; expr(0);
			State = 262; Match(T__4);
			State = 263; expr(0);
			State = 264; Match(T__17);
			State = 266;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
			case 1:
				{
				State = 265; member();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrowValueContext : ParserRuleContext {
		public ITerminalNode[] INT() { return GetTokens(CoronaParser.INT); }
		public ITerminalNode INT(int i) {
			return GetToken(CoronaParser.INT, i);
		}
		public ArrowValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrowValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.EnterArrowValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.ExitArrowValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoronaVisitor<TResult> typedVisitor = visitor as ICoronaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrowValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrowValueContext arrowValue() {
		ArrowValueContext _localctx = new ArrowValueContext(Context, State);
		EnterRule(_localctx, 46, RULE_arrowValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 268; Match(INT);
			State = 269; Match(T__30);
			State = 270; Match(INT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntValueContext : ParserRuleContext {
		public ITerminalNode INT() { return GetToken(CoronaParser.INT, 0); }
		public IntValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_intValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.EnterIntValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.ExitIntValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoronaVisitor<TResult> typedVisitor = visitor as ICoronaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntValueContext intValue() {
		IntValueContext _localctx = new IntValueContext(Context, State);
		EnterRule(_localctx, 48, RULE_intValue);
		try {
			State = 275;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 272; Match(INT);
				}
				break;
			case T__19:
				EnterOuterAlt(_localctx, 2);
				{
				State = 273; Match(T__19);
				State = 274; Match(INT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringValueContext : ParserRuleContext {
		public ITerminalNode STRING() { return GetToken(CoronaParser.STRING, 0); }
		public StringValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.EnterStringValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.ExitStringValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoronaVisitor<TResult> typedVisitor = visitor as ICoronaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringValueContext stringValue() {
		StringValueContext _localctx = new StringValueContext(Context, State);
		EnterRule(_localctx, 50, RULE_stringValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 277; Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierValueContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(CoronaParser.ID, 0); }
		public IdentifierValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifierValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.EnterIdentifierValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.ExitIdentifierValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoronaVisitor<TResult> typedVisitor = visitor as ICoronaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierValueContext identifierValue() {
		IdentifierValueContext _localctx = new IdentifierValueContext(Context, State);
		EnterRule(_localctx, 52, RULE_identifierValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 279; Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 17: return expr_sempred((ExprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 2);
		case 1: return Precpred(Context, 1);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '+', '\x11C', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x3', '\x2', '\x3', 
		'\x2', '\x6', '\x2', ';', '\n', '\x2', '\r', '\x2', '\xE', '\x2', '<', 
		'\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\a', '\x4', 'L', '\n', '\x4', 
		'\f', '\x4', '\xE', '\x4', 'O', '\v', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\a', '\x4', 'S', '\n', '\x4', '\f', '\x4', '\xE', '\x4', 'V', '\v', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\a', '\a', '\x65', '\n', '\a', '\f', 
		'\a', '\xE', '\a', 'h', '\v', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\t', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x5', '\t', 'v', '\n', '\t', 
		'\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\a', 
		'\n', '}', '\n', '\n', '\f', '\n', '\xE', '\n', '\x80', '\v', '\n', '\x3', 
		'\n', '\x3', '\n', '\x3', '\n', '\x6', '\n', '\x85', '\n', '\n', '\r', 
		'\n', '\xE', '\n', '\x86', '\x3', '\n', '\x3', '\n', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x5', '\v', '\x8E', '\n', '\v', '\x3', '\f', '\x3', 
		'\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\r', 
		'\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', 
		'\r', '\x3', '\r', '\x3', '\r', '\x5', '\r', '\x9F', '\n', '\r', '\x3', 
		'\r', '\x3', '\r', '\x3', '\r', '\x5', '\r', '\xA4', '\n', '\r', '\x3', 
		'\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x5', '\r', 
		'\xAB', '\n', '\r', '\x3', '\r', '\x3', '\r', '\x5', '\r', '\xAF', '\n', 
		'\r', '\x3', '\xE', '\x3', '\xE', '\a', '\xE', '\xB3', '\n', '\xE', '\f', 
		'\xE', '\xE', '\xE', '\xB6', '\v', '\xE', '\x3', '\xE', '\x3', '\xE', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', 
		'\a', '\xF', '\xC4', '\n', '\xF', '\f', '\xF', '\xE', '\xF', '\xC7', '\v', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x5', '\xF', '\xCB', '\n', '\xF', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x5', '\x10', 
		'\xD1', '\n', '\x10', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', 
		'\x11', '\a', '\x11', '\xD7', '\n', '\x11', '\f', '\x11', '\xE', '\x11', 
		'\xDA', '\v', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', 
		'\x12', '\x3', '\x12', '\x3', '\x12', '\x5', '\x12', '\xE2', '\n', '\x12', 
		'\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x5', '\x13', '\xE7', '\n', 
		'\x13', '\x3', '\x13', '\x5', '\x13', '\xEA', '\n', '\x13', '\x3', '\x13', 
		'\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', 
		'\x3', '\x13', '\x3', '\x13', '\a', '\x13', '\xF4', '\n', '\x13', '\f', 
		'\x13', '\xE', '\x13', '\xF7', '\v', '\x13', '\x3', '\x14', '\x3', '\x14', 
		'\x3', '\x15', '\x3', '\x15', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', 
		'\x5', '\x16', '\x100', '\n', '\x16', '\x3', '\x17', '\x3', '\x17', '\x3', 
		'\x17', '\x5', '\x17', '\x105', '\n', '\x17', '\x3', '\x18', '\x3', '\x18', 
		'\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x5', '\x18', 
		'\x10D', '\n', '\x18', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', 
		'\x19', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x5', '\x1A', '\x116', 
		'\n', '\x1A', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1C', '\x3', '\x1C', 
		'\x3', '\x1C', '\x2', '\x3', '$', '\x1D', '\x2', '\x4', '\x6', '\b', '\n', 
		'\f', '\xE', '\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', 
		' ', '\"', '$', '&', '(', '*', ',', '.', '\x30', '\x32', '\x34', '\x36', 
		'\x2', '\x4', '\x3', '\x2', '\x15', '\x18', '\x3', '\x2', '\x19', '\x1E', 
		'\x2', '\x121', '\x2', '\x38', '\x3', '\x2', '\x2', '\x2', '\x4', '\x41', 
		'\x3', '\x2', '\x2', '\x2', '\x6', 'G', '\x3', '\x2', '\x2', '\x2', '\b', 
		'Y', '\x3', '\x2', '\x2', '\x2', '\n', '\\', '\x3', '\x2', '\x2', '\x2', 
		'\f', '_', '\x3', '\x2', '\x2', '\x2', '\xE', 'k', '\x3', '\x2', '\x2', 
		'\x2', '\x10', 'u', '\x3', '\x2', '\x2', '\x2', '\x12', 'w', '\x3', '\x2', 
		'\x2', '\x2', '\x14', '\x8D', '\x3', '\x2', '\x2', '\x2', '\x16', '\x8F', 
		'\x3', '\x2', '\x2', '\x2', '\x18', '\xAE', '\x3', '\x2', '\x2', '\x2', 
		'\x1A', '\xB0', '\x3', '\x2', '\x2', '\x2', '\x1C', '\xCA', '\x3', '\x2', 
		'\x2', '\x2', '\x1E', '\xCC', '\x3', '\x2', '\x2', '\x2', ' ', '\xD2', 
		'\x3', '\x2', '\x2', '\x2', '\"', '\xE1', '\x3', '\x2', '\x2', '\x2', 
		'$', '\xE9', '\x3', '\x2', '\x2', '\x2', '&', '\xF8', '\x3', '\x2', '\x2', 
		'\x2', '(', '\xFA', '\x3', '\x2', '\x2', '\x2', '*', '\xFF', '\x3', '\x2', 
		'\x2', '\x2', ',', '\x104', '\x3', '\x2', '\x2', '\x2', '.', '\x106', 
		'\x3', '\x2', '\x2', '\x2', '\x30', '\x10E', '\x3', '\x2', '\x2', '\x2', 
		'\x32', '\x115', '\x3', '\x2', '\x2', '\x2', '\x34', '\x117', '\x3', '\x2', 
		'\x2', '\x2', '\x36', '\x119', '\x3', '\x2', '\x2', '\x2', '\x38', ':', 
		'\x5', '\x4', '\x3', '\x2', '\x39', ';', '\x5', '\x6', '\x4', '\x2', ':', 
		'\x39', '\x3', '\x2', '\x2', '\x2', ';', '<', '\x3', '\x2', '\x2', '\x2', 
		'<', ':', '\x3', '\x2', '\x2', '\x2', '<', '=', '\x3', '\x2', '\x2', '\x2', 
		'=', '>', '\x3', '\x2', '\x2', '\x2', '>', '?', '\x5', '\b', '\x5', '\x2', 
		'?', '@', '\x5', '\n', '\x6', '\x2', '@', '\x3', '\x3', '\x2', '\x2', 
		'\x2', '\x41', '\x42', '\a', '\x3', '\x2', '\x2', '\x42', '\x43', '\a', 
		'\x4', '\x2', '\x2', '\x43', '\x44', '\x5', '\xE', '\b', '\x2', '\x44', 
		'\x45', '\x5', '\xE', '\b', '\x2', '\x45', '\x46', '\a', '\x5', '\x2', 
		'\x2', '\x46', '\x5', '\x3', '\x2', '\x2', '\x2', 'G', 'H', '\a', '\x6', 
		'\x2', '\x2', 'H', 'M', '\a', '#', '\x2', '\x2', 'I', 'J', '\a', '\a', 
		'\x2', '\x2', 'J', 'L', '\a', '#', '\x2', '\x2', 'K', 'I', '\x3', '\x2', 
		'\x2', '\x2', 'L', 'O', '\x3', '\x2', '\x2', '\x2', 'M', 'K', '\x3', '\x2', 
		'\x2', '\x2', 'M', 'N', '\x3', '\x2', '\x2', '\x2', 'N', 'P', '\x3', '\x2', 
		'\x2', '\x2', 'O', 'M', '\x3', '\x2', '\x2', '\x2', 'P', 'T', '\a', '\x4', 
		'\x2', '\x2', 'Q', 'S', '\x5', '\f', '\a', '\x2', 'R', 'Q', '\x3', '\x2', 
		'\x2', '\x2', 'S', 'V', '\x3', '\x2', '\x2', '\x2', 'T', 'R', '\x3', '\x2', 
		'\x2', '\x2', 'T', 'U', '\x3', '\x2', '\x2', '\x2', 'U', 'W', '\x3', '\x2', 
		'\x2', '\x2', 'V', 'T', '\x3', '\x2', '\x2', '\x2', 'W', 'X', '\a', '\x5', 
		'\x2', '\x2', 'X', '\a', '\x3', '\x2', '\x2', '\x2', 'Y', 'Z', '\a', '\b', 
		'\x2', '\x2', 'Z', '[', '\x5', '\x1A', '\xE', '\x2', '[', '\t', '\x3', 
		'\x2', '\x2', '\x2', '\\', ']', '\a', '\t', '\x2', '\x2', ']', '^', '\x5', 
		'\x1A', '\xE', '\x2', '^', '\v', '\x3', '\x2', '\x2', '\x2', '_', '`', 
		'\a', '#', '\x2', '\x2', '`', '\x61', '\a', '\n', '\x2', '\x2', '\x61', 
		'\x66', '\x5', '*', '\x16', '\x2', '\x62', '\x63', '\a', '\a', '\x2', 
		'\x2', '\x63', '\x65', '\x5', '*', '\x16', '\x2', '\x64', '\x62', '\x3', 
		'\x2', '\x2', '\x2', '\x65', 'h', '\x3', '\x2', '\x2', '\x2', '\x66', 
		'\x64', '\x3', '\x2', '\x2', '\x2', '\x66', 'g', '\x3', '\x2', '\x2', 
		'\x2', 'g', 'i', '\x3', '\x2', '\x2', '\x2', 'h', '\x66', '\x3', '\x2', 
		'\x2', '\x2', 'i', 'j', '\a', '\v', '\x2', '\x2', 'j', '\r', '\x3', '\x2', 
		'\x2', '\x2', 'k', 'l', '\a', '#', '\x2', '\x2', 'l', 'm', '\a', '\n', 
		'\x2', '\x2', 'm', 'n', '\a', '$', '\x2', '\x2', 'n', 'o', '\a', '\v', 
		'\x2', '\x2', 'o', '\xF', '\x3', '\x2', '\x2', '\x2', 'p', 'v', '\x5', 
		'\x16', '\f', '\x2', 'q', 'v', '\x5', '\x18', '\r', '\x2', 'r', 'v', '\x5', 
		'\x1A', '\xE', '\x2', 's', 'v', '\x5', '\x1C', '\xF', '\x2', 't', 'v', 
		'\x5', '\x12', '\n', '\x2', 'u', 'p', '\x3', '\x2', '\x2', '\x2', 'u', 
		'q', '\x3', '\x2', '\x2', '\x2', 'u', 'r', '\x3', '\x2', '\x2', '\x2', 
		'u', 's', '\x3', '\x2', '\x2', '\x2', 'u', 't', '\x3', '\x2', '\x2', '\x2', 
		'v', '\x11', '\x3', '\x2', '\x2', '\x2', 'w', 'x', '\a', '\f', '\x2', 
		'\x2', 'x', 'y', '\a', '\r', '\x2', '\x2', 'y', '~', '\x5', '\x14', '\v', 
		'\x2', 'z', '{', '\a', '\a', '\x2', '\x2', '{', '}', '\x5', '\x14', '\v', 
		'\x2', '|', 'z', '\x3', '\x2', '\x2', '\x2', '}', '\x80', '\x3', '\x2', 
		'\x2', '\x2', '~', '|', '\x3', '\x2', '\x2', '\x2', '~', '\x7F', '\x3', 
		'\x2', '\x2', '\x2', '\x7F', '\x81', '\x3', '\x2', '\x2', '\x2', '\x80', 
		'~', '\x3', '\x2', '\x2', '\x2', '\x81', '\x82', '\a', '\xE', '\x2', '\x2', 
		'\x82', '\x84', '\a', '\x4', '\x2', '\x2', '\x83', '\x85', '\x5', ' ', 
		'\x11', '\x2', '\x84', '\x83', '\x3', '\x2', '\x2', '\x2', '\x85', '\x86', 
		'\x3', '\x2', '\x2', '\x2', '\x86', '\x84', '\x3', '\x2', '\x2', '\x2', 
		'\x86', '\x87', '\x3', '\x2', '\x2', '\x2', '\x87', '\x88', '\x3', '\x2', 
		'\x2', '\x2', '\x88', '\x89', '\a', '\x5', '\x2', '\x2', '\x89', '\x13', 
		'\x3', '\x2', '\x2', '\x2', '\x8A', '\x8E', '\x5', ',', '\x17', '\x2', 
		'\x8B', '\x8E', '\x5', '.', '\x18', '\x2', '\x8C', '\x8E', '\x5', '$', 
		'\x13', '\x2', '\x8D', '\x8A', '\x3', '\x2', '\x2', '\x2', '\x8D', '\x8B', 
		'\x3', '\x2', '\x2', '\x2', '\x8D', '\x8C', '\x3', '\x2', '\x2', '\x2', 
		'\x8E', '\x15', '\x3', '\x2', '\x2', '\x2', '\x8F', '\x90', '\a', '\xF', 
		'\x2', '\x2', '\x90', '\x91', '\a', '\r', '\x2', '\x2', '\x91', '\x92', 
		'\x5', '$', '\x13', '\x2', '\x92', '\x93', '\a', '\xE', '\x2', '\x2', 
		'\x93', '\x94', '\x5', '\x10', '\t', '\x2', '\x94', '\x17', '\x3', '\x2', 
		'\x2', '\x2', '\x95', '\x96', '\x5', '.', '\x18', '\x2', '\x96', '\x97', 
		'\a', '\x10', '\x2', '\x2', '\x97', '\x98', '\a', '#', '\x2', '\x2', '\x98', 
		'\x99', '\a', '\v', '\x2', '\x2', '\x99', '\xAF', '\x3', '\x2', '\x2', 
		'\x2', '\x9A', '\x9B', '\x5', '\x36', '\x1C', '\x2', '\x9B', '\x9E', '\a', 
		'\x10', '\x2', '\x2', '\x9C', '\x9F', '\x5', '$', '\x13', '\x2', '\x9D', 
		'\x9F', '\a', '%', '\x2', '\x2', '\x9E', '\x9C', '\x3', '\x2', '\x2', 
		'\x2', '\x9E', '\x9D', '\x3', '\x2', '\x2', '\x2', '\x9F', '\xA0', '\x3', 
		'\x2', '\x2', '\x2', '\xA0', '\xA1', '\a', '\v', '\x2', '\x2', '\xA1', 
		'\xAF', '\x3', '\x2', '\x2', '\x2', '\xA2', '\xA4', '\x5', '.', '\x18', 
		'\x2', '\xA3', '\xA2', '\x3', '\x2', '\x2', '\x2', '\xA3', '\xA4', '\x3', 
		'\x2', '\x2', '\x2', '\xA4', '\xA5', '\x3', '\x2', '\x2', '\x2', '\xA5', 
		'\xA6', '\a', '\x11', '\x2', '\x2', '\xA6', '\xA7', '\x5', '\x36', '\x1C', 
		'\x2', '\xA7', '\xAA', '\a', '\x10', '\x2', '\x2', '\xA8', '\xAB', '\x5', 
		'$', '\x13', '\x2', '\xA9', '\xAB', '\a', '%', '\x2', '\x2', '\xAA', '\xA8', 
		'\x3', '\x2', '\x2', '\x2', '\xAA', '\xA9', '\x3', '\x2', '\x2', '\x2', 
		'\xAB', '\xAC', '\x3', '\x2', '\x2', '\x2', '\xAC', '\xAD', '\a', '\v', 
		'\x2', '\x2', '\xAD', '\xAF', '\x3', '\x2', '\x2', '\x2', '\xAE', '\x95', 
		'\x3', '\x2', '\x2', '\x2', '\xAE', '\x9A', '\x3', '\x2', '\x2', '\x2', 
		'\xAE', '\xA3', '\x3', '\x2', '\x2', '\x2', '\xAF', '\x19', '\x3', '\x2', 
		'\x2', '\x2', '\xB0', '\xB4', '\a', '\x4', '\x2', '\x2', '\xB1', '\xB3', 
		'\x5', '\x10', '\t', '\x2', '\xB2', '\xB1', '\x3', '\x2', '\x2', '\x2', 
		'\xB3', '\xB6', '\x3', '\x2', '\x2', '\x2', '\xB4', '\xB2', '\x3', '\x2', 
		'\x2', '\x2', '\xB4', '\xB5', '\x3', '\x2', '\x2', '\x2', '\xB5', '\xB7', 
		'\x3', '\x2', '\x2', '\x2', '\xB6', '\xB4', '\x3', '\x2', '\x2', '\x2', 
		'\xB7', '\xB8', '\a', '\x5', '\x2', '\x2', '\xB8', '\x1B', '\x3', '\x2', 
		'\x2', '\x2', '\xB9', '\xBA', '\a', '\x12', '\x2', '\x2', '\xBA', '\xBB', 
		'\x5', '\x36', '\x1C', '\x2', '\xBB', '\xBC', '\a', '\v', '\x2', '\x2', 
		'\xBC', '\xCB', '\x3', '\x2', '\x2', '\x2', '\xBD', '\xBE', '\a', '\x12', 
		'\x2', '\x2', '\xBE', '\xBF', '\x5', '\x36', '\x1C', '\x2', '\xBF', '\xC0', 
		'\a', '\x4', '\x2', '\x2', '\xC0', '\xC5', '\x5', '\x1E', '\x10', '\x2', 
		'\xC1', '\xC2', '\a', '\a', '\x2', '\x2', '\xC2', '\xC4', '\x5', '\x1E', 
		'\x10', '\x2', '\xC3', '\xC1', '\x3', '\x2', '\x2', '\x2', '\xC4', '\xC7', 
		'\x3', '\x2', '\x2', '\x2', '\xC5', '\xC3', '\x3', '\x2', '\x2', '\x2', 
		'\xC5', '\xC6', '\x3', '\x2', '\x2', '\x2', '\xC6', '\xC8', '\x3', '\x2', 
		'\x2', '\x2', '\xC7', '\xC5', '\x3', '\x2', '\x2', '\x2', '\xC8', '\xC9', 
		'\a', '\x5', '\x2', '\x2', '\xC9', '\xCB', '\x3', '\x2', '\x2', '\x2', 
		'\xCA', '\xB9', '\x3', '\x2', '\x2', '\x2', '\xCA', '\xBD', '\x3', '\x2', 
		'\x2', '\x2', '\xCB', '\x1D', '\x3', '\x2', '\x2', '\x2', '\xCC', '\xCD', 
		'\x5', '\x36', '\x1C', '\x2', '\xCD', '\xD0', '\a', '\n', '\x2', '\x2', 
		'\xCE', '\xD1', '\x5', '$', '\x13', '\x2', '\xCF', '\xD1', '\a', '%', 
		'\x2', '\x2', '\xD0', '\xCE', '\x3', '\x2', '\x2', '\x2', '\xD0', '\xCF', 
		'\x3', '\x2', '\x2', '\x2', '\xD1', '\x1F', '\x3', '\x2', '\x2', '\x2', 
		'\xD2', '\xD3', '\a', '\x13', '\x2', '\x2', '\xD3', '\xD8', '\x5', '\"', 
		'\x12', '\x2', '\xD4', '\xD5', '\a', '\a', '\x2', '\x2', '\xD5', '\xD7', 
		'\x5', '\"', '\x12', '\x2', '\xD6', '\xD4', '\x3', '\x2', '\x2', '\x2', 
		'\xD7', '\xDA', '\x3', '\x2', '\x2', '\x2', '\xD8', '\xD6', '\x3', '\x2', 
		'\x2', '\x2', '\xD8', '\xD9', '\x3', '\x2', '\x2', '\x2', '\xD9', '\xDB', 
		'\x3', '\x2', '\x2', '\x2', '\xDA', '\xD8', '\x3', '\x2', '\x2', '\x2', 
		'\xDB', '\xDC', '\a', '\x14', '\x2', '\x2', '\xDC', '\xDD', '\x5', '\x10', 
		'\t', '\x2', '\xDD', '!', '\x3', '\x2', '\x2', '\x2', '\xDE', '\xE2', 
		'\x5', '*', '\x16', '\x2', '\xDF', '\xE2', '\x5', '\x36', '\x1C', '\x2', 
		'\xE0', '\xE2', '\a', '\"', '\x2', '\x2', '\xE1', '\xDE', '\x3', '\x2', 
		'\x2', '\x2', '\xE1', '\xDF', '\x3', '\x2', '\x2', '\x2', '\xE1', '\xE0', 
		'\x3', '\x2', '\x2', '\x2', '\xE2', '#', '\x3', '\x2', '\x2', '\x2', '\xE3', 
		'\xE4', '\b', '\x13', '\x1', '\x2', '\xE4', '\xEA', '\x5', '\x32', '\x1A', 
		'\x2', '\xE5', '\xE7', '\a', '\x11', '\x2', '\x2', '\xE6', '\xE5', '\x3', 
		'\x2', '\x2', '\x2', '\xE6', '\xE7', '\x3', '\x2', '\x2', '\x2', '\xE7', 
		'\xE8', '\x3', '\x2', '\x2', '\x2', '\xE8', '\xEA', '\x5', '\x36', '\x1C', 
		'\x2', '\xE9', '\xE3', '\x3', '\x2', '\x2', '\x2', '\xE9', '\xE6', '\x3', 
		'\x2', '\x2', '\x2', '\xEA', '\xF5', '\x3', '\x2', '\x2', '\x2', '\xEB', 
		'\xEC', '\f', '\x4', '\x2', '\x2', '\xEC', '\xED', '\x5', '&', '\x14', 
		'\x2', '\xED', '\xEE', '\x5', '$', '\x13', '\x5', '\xEE', '\xF4', '\x3', 
		'\x2', '\x2', '\x2', '\xEF', '\xF0', '\f', '\x3', '\x2', '\x2', '\xF0', 
		'\xF1', '\x5', '(', '\x15', '\x2', '\xF1', '\xF2', '\x5', '$', '\x13', 
		'\x4', '\xF2', '\xF4', '\x3', '\x2', '\x2', '\x2', '\xF3', '\xEB', '\x3', 
		'\x2', '\x2', '\x2', '\xF3', '\xEF', '\x3', '\x2', '\x2', '\x2', '\xF4', 
		'\xF7', '\x3', '\x2', '\x2', '\x2', '\xF5', '\xF3', '\x3', '\x2', '\x2', 
		'\x2', '\xF5', '\xF6', '\x3', '\x2', '\x2', '\x2', '\xF6', '%', '\x3', 
		'\x2', '\x2', '\x2', '\xF7', '\xF5', '\x3', '\x2', '\x2', '\x2', '\xF8', 
		'\xF9', '\t', '\x2', '\x2', '\x2', '\xF9', '\'', '\x3', '\x2', '\x2', 
		'\x2', '\xFA', '\xFB', '\t', '\x3', '\x2', '\x2', '\xFB', ')', '\x3', 
		'\x2', '\x2', '\x2', '\xFC', '\x100', '\x5', '\x30', '\x19', '\x2', '\xFD', 
		'\x100', '\x5', '\x32', '\x1A', '\x2', '\xFE', '\x100', '\x5', '\x34', 
		'\x1B', '\x2', '\xFF', '\xFC', '\x3', '\x2', '\x2', '\x2', '\xFF', '\xFD', 
		'\x3', '\x2', '\x2', '\x2', '\xFF', '\xFE', '\x3', '\x2', '\x2', '\x2', 
		'\x100', '+', '\x3', '\x2', '\x2', '\x2', '\x101', '\x105', '\a', '\x1F', 
		'\x2', '\x2', '\x102', '\x103', '\a', '\x11', '\x2', '\x2', '\x103', '\x105', 
		'\x5', '\x36', '\x1C', '\x2', '\x104', '\x101', '\x3', '\x2', '\x2', '\x2', 
		'\x104', '\x102', '\x3', '\x2', '\x2', '\x2', '\x105', '-', '\x3', '\x2', 
		'\x2', '\x2', '\x106', '\x107', '\a', ' ', '\x2', '\x2', '\x107', '\x108', 
		'\x5', '$', '\x13', '\x2', '\x108', '\x109', '\a', '\a', '\x2', '\x2', 
		'\x109', '\x10A', '\x5', '$', '\x13', '\x2', '\x10A', '\x10C', '\a', '\x14', 
		'\x2', '\x2', '\x10B', '\x10D', '\x5', ',', '\x17', '\x2', '\x10C', '\x10B', 
		'\x3', '\x2', '\x2', '\x2', '\x10C', '\x10D', '\x3', '\x2', '\x2', '\x2', 
		'\x10D', '/', '\x3', '\x2', '\x2', '\x2', '\x10E', '\x10F', '\a', '$', 
		'\x2', '\x2', '\x10F', '\x110', '\a', '!', '\x2', '\x2', '\x110', '\x111', 
		'\a', '$', '\x2', '\x2', '\x111', '\x31', '\x3', '\x2', '\x2', '\x2', 
		'\x112', '\x116', '\a', '$', '\x2', '\x2', '\x113', '\x114', '\a', '\x16', 
		'\x2', '\x2', '\x114', '\x116', '\a', '$', '\x2', '\x2', '\x115', '\x112', 
		'\x3', '\x2', '\x2', '\x2', '\x115', '\x113', '\x3', '\x2', '\x2', '\x2', 
		'\x116', '\x33', '\x3', '\x2', '\x2', '\x2', '\x117', '\x118', '\a', '%', 
		'\x2', '\x2', '\x118', '\x35', '\x3', '\x2', '\x2', '\x2', '\x119', '\x11A', 
		'\a', '#', '\x2', '\x2', '\x11A', '\x37', '\x3', '\x2', '\x2', '\x2', 
		'\x1C', '<', 'M', 'T', '\x66', 'u', '~', '\x86', '\x8D', '\x9E', '\xA3', 
		'\xAA', '\xAE', '\xB4', '\xC5', '\xCA', '\xD0', '\xD8', '\xE1', '\xE6', 
		'\xE9', '\xF3', '\xF5', '\xFF', '\x104', '\x10C', '\x115',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
