GRID
{
	x: 0 -> 15;
	y: 0 -> 15;
}

STATES dead, alive
{
	
}

INITIAL
{
	grid[1,1] = alive;
	grid[1,2] = alive;
	grid[1,3] = alive;
}

RULES
{
	count = 0;
	radius = 1;
	for (r = -radius; r <= radius; r = r + 1)
	{
		for (c = -radius; c <= radius; c = c + 1)
		{
			include = r != 0 OR c != 0;
			match(include)
			{
				[true]
					match(grid[r, c].state)
					{
						[alive]
							count = count + 1;
					}
			}
		}
	}
	match(.state)
	{
		[alive]
		{
			match(count)
			{
				[2 -> 3]
					return alive;
				[_]
					return dead;
			}
		}
		[dead]
		{
			match(count)
			{
				[3]
				 	return alive;
			}
		}
	}
}

# Return the number of alive neighbors #
int Neighbors(radius)
{
	count = 0;
	for (r = -radius; r <= radius; r = r + 1)
	{
		for (c = -radius; c <= radius; c = c + 1)
		{
			include = r != 0 OR c != 0;
			match(include)
			{
				[true]
					match(grid[r, c].state)
					{
						[alive]
							count = count + 1;
					}
			}
		}
	}
	return count;
}