//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Grammar/Corona.g4 by ANTLR 4.7.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.2")]
[System.CLSCompliant(false)]
public partial class CoronaParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		ID=32, INT=33, STRING=34, COMMENT=35, WS=36, CR=37, NL=38, CRNL=39;
	public const int
		RULE_main = 0, RULE_grid = 1, RULE_states = 2, RULE_initial = 3, RULE_rules = 4, 
		RULE_declaration = 5, RULE_memberDeclaration = 6, RULE_statements = 7, 
		RULE_statement = 8, RULE_selectionStatement = 9, RULE_iterationStatement = 10, 
		RULE_assignmentStatement = 11, RULE_ruleStatement = 12, RULE_compoundStatement = 13, 
		RULE_returnStatement = 14, RULE_blockItemList = 15, RULE_blockItem = 16, 
		RULE_expr = 17, RULE_operator = 18;
	public static readonly string[] ruleNames = {
		"main", "grid", "states", "initial", "rules", "declaration", "memberDeclaration", 
		"statements", "statement", "selectionStatement", "iterationStatement", 
		"assignmentStatement", "ruleStatement", "compoundStatement", "returnStatement", 
		"blockItemList", "blockItem", "expr", "operator"
	};

	private static readonly string[] _LiteralNames = {
		null, "'GRID'", "'@'", "';'", "'STATES'", "','", "'{'", "'}'", "'INITIAL'", 
		"'RULES'", "':'", "'if'", "'('", "')'", "'else'", "'for'", "'['", "']'", 
		"'.'", "'='", "'return'", "'+'", "'-'", "'*'", "'/'", "'->'", "'=='", 
		"'!='", "'<'", "'>'", "'<='", "'>='", null, null, null, null, null, "'\r'", 
		"'\n'", "'\r\n'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, "ID", "INT", "STRING", 
		"COMMENT", "WS", "CR", "NL", "CRNL"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Corona.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static CoronaParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public CoronaParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public CoronaParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class MainContext : ParserRuleContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public MainContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_main; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.EnterMain(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.ExitMain(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoronaVisitor<TResult> typedVisitor = visitor as ICoronaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMain(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MainContext main() {
		MainContext _localctx = new MainContext(Context, State);
		EnterRule(_localctx, 0, RULE_main);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 38; expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GridContext : ParserRuleContext {
		public ITerminalNode[] INT() { return GetTokens(CoronaParser.INT); }
		public ITerminalNode INT(int i) {
			return GetToken(CoronaParser.INT, i);
		}
		public GridContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_grid; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.EnterGrid(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.ExitGrid(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoronaVisitor<TResult> typedVisitor = visitor as ICoronaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGrid(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GridContext grid() {
		GridContext _localctx = new GridContext(Context, State);
		EnterRule(_localctx, 2, RULE_grid);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 40; Match(T__0);
			State = 41; Match(INT);
			State = 42; Match(T__1);
			State = 43; Match(INT);
			State = 44; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatesContext : ParserRuleContext {
		public ITerminalNode[] ID() { return GetTokens(CoronaParser.ID); }
		public ITerminalNode ID(int i) {
			return GetToken(CoronaParser.ID, i);
		}
		public DeclarationContext[] declaration() {
			return GetRuleContexts<DeclarationContext>();
		}
		public DeclarationContext declaration(int i) {
			return GetRuleContext<DeclarationContext>(i);
		}
		public StatesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_states; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.EnterStates(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.ExitStates(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoronaVisitor<TResult> typedVisitor = visitor as ICoronaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStates(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatesContext states() {
		StatesContext _localctx = new StatesContext(Context, State);
		EnterRule(_localctx, 4, RULE_states);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 46; Match(T__3);
			State = 47; Match(ID);
			State = 52;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__4) {
				{
				{
				State = 48; Match(T__4);
				State = 49; Match(ID);
				}
				}
				State = 54;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 55; Match(T__5);
			State = 57;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 56; declaration();
				}
				}
				State = 59;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==ID );
			State = 61; Match(T__6);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitialContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(CoronaParser.ID, 0); }
		public StatementsContext statements() {
			return GetRuleContext<StatementsContext>(0);
		}
		public InitialContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initial; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.EnterInitial(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.ExitInitial(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoronaVisitor<TResult> typedVisitor = visitor as ICoronaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInitial(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InitialContext initial() {
		InitialContext _localctx = new InitialContext(Context, State);
		EnterRule(_localctx, 6, RULE_initial);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 63; Match(T__7);
			State = 64; Match(ID);
			State = 65; Match(T__5);
			State = 66; statements();
			State = 67; Match(T__6);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RulesContext : ParserRuleContext {
		public RuleStatementContext[] ruleStatement() {
			return GetRuleContexts<RuleStatementContext>();
		}
		public RuleStatementContext ruleStatement(int i) {
			return GetRuleContext<RuleStatementContext>(i);
		}
		public RulesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rules; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.EnterRules(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.ExitRules(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoronaVisitor<TResult> typedVisitor = visitor as ICoronaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRules(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RulesContext rules() {
		RulesContext _localctx = new RulesContext(Context, State);
		EnterRule(_localctx, 8, RULE_rules);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 69; Match(T__8);
			State = 70; Match(T__5);
			State = 74;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__15) {
				{
				{
				State = 71; ruleStatement();
				}
				}
				State = 76;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 77; Match(T__6);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationContext : ParserRuleContext {
		public MemberDeclarationContext memberDeclaration() {
			return GetRuleContext<MemberDeclarationContext>(0);
		}
		public DeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.EnterDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.ExitDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoronaVisitor<TResult> typedVisitor = visitor as ICoronaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationContext declaration() {
		DeclarationContext _localctx = new DeclarationContext(Context, State);
		EnterRule(_localctx, 10, RULE_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 79; memberDeclaration();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberDeclarationContext : ParserRuleContext {
		public IToken id;
		public ITerminalNode[] STRING() { return GetTokens(CoronaParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(CoronaParser.STRING, i);
		}
		public ITerminalNode ID() { return GetToken(CoronaParser.ID, 0); }
		public MemberDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.EnterMemberDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.ExitMemberDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoronaVisitor<TResult> typedVisitor = visitor as ICoronaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemberDeclarationContext memberDeclaration() {
		MemberDeclarationContext _localctx = new MemberDeclarationContext(Context, State);
		EnterRule(_localctx, 12, RULE_memberDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 81; _localctx.id = Match(ID);
			State = 82; Match(T__9);
			State = 83; Match(STRING);
			State = 88;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__4) {
				{
				{
				State = 84; Match(T__4);
				State = 85; Match(STRING);
				}
				}
				State = 90;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 91; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementsContext : ParserRuleContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public StatementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statements; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.EnterStatements(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.ExitStatements(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoronaVisitor<TResult> typedVisitor = visitor as ICoronaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementsContext statements() {
		StatementsContext _localctx = new StatementsContext(Context, State);
		EnterRule(_localctx, 14, RULE_statements);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 96;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__5) | (1L << T__10) | (1L << T__14) | (1L << T__15) | (1L << T__19) | (1L << ID))) != 0)) {
				{
				{
				State = 93; statement();
				}
				}
				State = 98;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public SelectionStatementContext selectionStatement() {
			return GetRuleContext<SelectionStatementContext>(0);
		}
		public IterationStatementContext iterationStatement() {
			return GetRuleContext<IterationStatementContext>(0);
		}
		public AssignmentStatementContext assignmentStatement() {
			return GetRuleContext<AssignmentStatementContext>(0);
		}
		public RuleStatementContext ruleStatement() {
			return GetRuleContext<RuleStatementContext>(0);
		}
		public CompoundStatementContext compoundStatement() {
			return GetRuleContext<CompoundStatementContext>(0);
		}
		public ReturnStatementContext returnStatement() {
			return GetRuleContext<ReturnStatementContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoronaVisitor<TResult> typedVisitor = visitor as ICoronaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 16, RULE_statement);
		try {
			State = 105;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__10:
				EnterOuterAlt(_localctx, 1);
				{
				State = 99; selectionStatement();
				}
				break;
			case T__14:
				EnterOuterAlt(_localctx, 2);
				{
				State = 100; iterationStatement();
				}
				break;
			case ID:
				EnterOuterAlt(_localctx, 3);
				{
				State = 101; assignmentStatement();
				}
				break;
			case T__15:
				EnterOuterAlt(_localctx, 4);
				{
				State = 102; ruleStatement();
				}
				break;
			case T__5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 103; compoundStatement();
				}
				break;
			case T__19:
				EnterOuterAlt(_localctx, 6);
				{
				State = 104; returnStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectionStatementContext : ParserRuleContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public SelectionStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectionStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.EnterSelectionStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.ExitSelectionStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoronaVisitor<TResult> typedVisitor = visitor as ICoronaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectionStatementContext selectionStatement() {
		SelectionStatementContext _localctx = new SelectionStatementContext(Context, State);
		EnterRule(_localctx, 18, RULE_selectionStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 107; Match(T__10);
			State = 108; Match(T__11);
			State = 109; expr(0);
			State = 110; Match(T__12);
			State = 111; statement();
			State = 114;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				{
				State = 112; Match(T__13);
				State = 113; statement();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IterationStatementContext : ParserRuleContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public IterationStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iterationStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.EnterIterationStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.ExitIterationStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoronaVisitor<TResult> typedVisitor = visitor as ICoronaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIterationStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IterationStatementContext iterationStatement() {
		IterationStatementContext _localctx = new IterationStatementContext(Context, State);
		EnterRule(_localctx, 20, RULE_iterationStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 116; Match(T__14);
			State = 117; Match(T__11);
			State = 118; expr(0);
			State = 119; Match(T__2);
			State = 120; expr(0);
			State = 121; Match(T__2);
			State = 122; expr(0);
			State = 123; Match(T__12);
			State = 124; statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentStatementContext : ParserRuleContext {
		public ITerminalNode[] ID() { return GetTokens(CoronaParser.ID); }
		public ITerminalNode ID(int i) {
			return GetToken(CoronaParser.ID, i);
		}
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode STRING() { return GetToken(CoronaParser.STRING, 0); }
		public AssignmentStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.EnterAssignmentStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.ExitAssignmentStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoronaVisitor<TResult> typedVisitor = visitor as ICoronaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentStatementContext assignmentStatement() {
		AssignmentStatementContext _localctx = new AssignmentStatementContext(Context, State);
		EnterRule(_localctx, 22, RULE_assignmentStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 126; Match(ID);
			State = 133;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__15) {
				{
				State = 127; Match(T__15);
				State = 128; expr(0);
				State = 129; Match(T__4);
				State = 130; expr(0);
				State = 131; Match(T__16);
				}
			}

			State = 137;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__17) {
				{
				State = 135; Match(T__17);
				State = 136; Match(ID);
				}
			}

			State = 139; Match(T__18);
			State = 143;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				{
				State = 140; expr(0);
				}
				break;
			case 2:
				{
				State = 141; Match(ID);
				}
				break;
			case 3:
				{
				State = 142; Match(STRING);
				}
				break;
			}
			State = 145; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RuleStatementContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(CoronaParser.ID, 0); }
		public StatementsContext statements() {
			return GetRuleContext<StatementsContext>(0);
		}
		public RuleStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ruleStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.EnterRuleStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.ExitRuleStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoronaVisitor<TResult> typedVisitor = visitor as ICoronaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRuleStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RuleStatementContext ruleStatement() {
		RuleStatementContext _localctx = new RuleStatementContext(Context, State);
		EnterRule(_localctx, 24, RULE_ruleStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 147; Match(T__15);
			State = 148; Match(ID);
			State = 149; Match(T__16);
			State = 150; Match(T__5);
			State = 151; statements();
			State = 152; Match(T__6);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompoundStatementContext : ParserRuleContext {
		public BlockItemListContext blockItemList() {
			return GetRuleContext<BlockItemListContext>(0);
		}
		public CompoundStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compoundStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.EnterCompoundStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.ExitCompoundStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoronaVisitor<TResult> typedVisitor = visitor as ICoronaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompoundStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompoundStatementContext compoundStatement() {
		CompoundStatementContext _localctx = new CompoundStatementContext(Context, State);
		EnterRule(_localctx, 26, RULE_compoundStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 154; Match(T__5);
			State = 156;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__5) | (1L << T__10) | (1L << T__14) | (1L << T__15) | (1L << T__19) | (1L << ID))) != 0)) {
				{
				State = 155; blockItemList(0);
				}
			}

			State = 158; Match(T__6);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStatementContext : ParserRuleContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ReturnStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.EnterReturnStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.ExitReturnStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoronaVisitor<TResult> typedVisitor = visitor as ICoronaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStatementContext returnStatement() {
		ReturnStatementContext _localctx = new ReturnStatementContext(Context, State);
		EnterRule(_localctx, 28, RULE_returnStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 160; Match(T__19);
			State = 161; expr(0);
			State = 162; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockItemListContext : ParserRuleContext {
		public BlockItemContext blockItem() {
			return GetRuleContext<BlockItemContext>(0);
		}
		public BlockItemListContext blockItemList() {
			return GetRuleContext<BlockItemListContext>(0);
		}
		public BlockItemListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockItemList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.EnterBlockItemList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.ExitBlockItemList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoronaVisitor<TResult> typedVisitor = visitor as ICoronaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockItemList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockItemListContext blockItemList() {
		return blockItemList(0);
	}

	private BlockItemListContext blockItemList(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		BlockItemListContext _localctx = new BlockItemListContext(Context, _parentState);
		BlockItemListContext _prevctx = _localctx;
		int _startState = 30;
		EnterRecursionRule(_localctx, 30, RULE_blockItemList, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 165; blockItem();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 171;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new BlockItemListContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_blockItemList);
					State = 167;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 168; blockItem();
					}
					} 
				}
				State = 173;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class BlockItemContext : ParserRuleContext {
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		public BlockItemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockItem; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.EnterBlockItem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.ExitBlockItem(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoronaVisitor<TResult> typedVisitor = visitor as ICoronaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockItem(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockItemContext blockItem() {
		BlockItemContext _localctx = new BlockItemContext(Context, State);
		EnterRule(_localctx, 32, RULE_blockItem);
		try {
			State = 176;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 174; statement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 175; declaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
	 
		public ExprContext() { }
		public virtual void CopyFrom(ExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class StringExprContext : ExprContext {
		public IToken value;
		public ITerminalNode ID() { return GetToken(CoronaParser.ID, 0); }
		public ITerminalNode STRING() { return GetToken(CoronaParser.STRING, 0); }
		public StringExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.EnterStringExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.ExitStringExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoronaVisitor<TResult> typedVisitor = visitor as ICoronaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NumberExprContext : ExprContext {
		public IToken value;
		public ITerminalNode INT() { return GetToken(CoronaParser.INT, 0); }
		public NumberExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.EnterNumberExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.ExitNumberExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoronaVisitor<TResult> typedVisitor = visitor as ICoronaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumberExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class InfixExprContext : ExprContext {
		public ExprContext left;
		public OperatorContext op;
		public ExprContext right;
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public OperatorContext @operator() {
			return GetRuleContext<OperatorContext>(0);
		}
		public InfixExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.EnterInfixExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.ExitInfixExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoronaVisitor<TResult> typedVisitor = visitor as ICoronaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInfixExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(Context, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 34;
		EnterRecursionRule(_localctx, 34, RULE_expr, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 182;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INT:
				{
				_localctx = new NumberExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 179; ((NumberExprContext)_localctx).value = Match(INT);
				}
				break;
			case ID:
				{
				_localctx = new StringExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 180; ((StringExprContext)_localctx).value = Match(ID);
				}
				break;
			case STRING:
				{
				_localctx = new StringExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 181; ((StringExprContext)_localctx).value = Match(STRING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 190;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new InfixExprContext(new ExprContext(_parentctx, _parentState));
					((InfixExprContext)_localctx).left = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_expr);
					State = 184;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 185; ((InfixExprContext)_localctx).op = @operator();
					State = 186; ((InfixExprContext)_localctx).right = expr(2);
					}
					} 
				}
				State = 192;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class OperatorContext : ParserRuleContext {
		public OperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.EnterOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.ExitOperator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoronaVisitor<TResult> typedVisitor = visitor as ICoronaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorContext @operator() {
		OperatorContext _localctx = new OperatorContext(Context, State);
		EnterRule(_localctx, 36, RULE_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 193;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__20) | (1L << T__21) | (1L << T__22) | (1L << T__23) | (1L << T__24) | (1L << T__25) | (1L << T__26) | (1L << T__27) | (1L << T__28) | (1L << T__29) | (1L << T__30))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 15: return blockItemList_sempred((BlockItemListContext)_localctx, predIndex);
		case 17: return expr_sempred((ExprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool blockItemList_sempred(BlockItemListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 1);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(Context, 1);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', ')', '\xC6', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\a', '\x4', 
		'\x35', '\n', '\x4', '\f', '\x4', '\xE', '\x4', '\x38', '\v', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x6', '\x4', '<', '\n', '\x4', '\r', '\x4', '\xE', 
		'\x4', '=', '\x3', '\x4', '\x3', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\a', '\x6', 'K', '\n', '\x6', '\f', '\x6', '\xE', 
		'\x6', 'N', '\v', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\a', '\x3', 
		'\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\a', '\b', 'Y', '\n', '\b', '\f', '\b', '\xE', '\b', '\\', '\v', '\b', 
		'\x3', '\b', '\x3', '\b', '\x3', '\t', '\a', '\t', '\x61', '\n', '\t', 
		'\f', '\t', '\xE', '\t', '\x64', '\v', '\t', '\x3', '\n', '\x3', '\n', 
		'\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x5', '\n', 'l', 
		'\n', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x5', '\v', 'u', '\n', '\v', '\x3', '\f', 
		'\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', 
		'\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\r', '\x3', '\r', 
		'\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x5', 
		'\r', '\x88', '\n', '\r', '\x3', '\r', '\x3', '\r', '\x5', '\r', '\x8C', 
		'\n', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x5', 
		'\r', '\x92', '\n', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\xE', '\x3', 
		'\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', 
		'\xE', '\x3', '\xF', '\x3', '\xF', '\x5', '\xF', '\x9F', '\n', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\a', '\x11', '\xAC', '\n', '\x11', '\f', '\x11', '\xE', 
		'\x11', '\xAF', '\v', '\x11', '\x3', '\x12', '\x3', '\x12', '\x5', '\x12', 
		'\xB3', '\n', '\x12', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', 
		'\x13', '\x5', '\x13', '\xB9', '\n', '\x13', '\x3', '\x13', '\x3', '\x13', 
		'\x3', '\x13', '\x3', '\x13', '\a', '\x13', '\xBF', '\n', '\x13', '\f', 
		'\x13', '\xE', '\x13', '\xC2', '\v', '\x13', '\x3', '\x14', '\x3', '\x14', 
		'\x3', '\x14', '\x2', '\x4', ' ', '$', '\x15', '\x2', '\x4', '\x6', '\b', 
		'\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', 
		'\x1E', ' ', '\"', '$', '&', '\x2', '\x3', '\x3', '\x2', '\x17', '!', 
		'\x2', '\xC7', '\x2', '(', '\x3', '\x2', '\x2', '\x2', '\x4', '*', '\x3', 
		'\x2', '\x2', '\x2', '\x6', '\x30', '\x3', '\x2', '\x2', '\x2', '\b', 
		'\x41', '\x3', '\x2', '\x2', '\x2', '\n', 'G', '\x3', '\x2', '\x2', '\x2', 
		'\f', 'Q', '\x3', '\x2', '\x2', '\x2', '\xE', 'S', '\x3', '\x2', '\x2', 
		'\x2', '\x10', '\x62', '\x3', '\x2', '\x2', '\x2', '\x12', 'k', '\x3', 
		'\x2', '\x2', '\x2', '\x14', 'm', '\x3', '\x2', '\x2', '\x2', '\x16', 
		'v', '\x3', '\x2', '\x2', '\x2', '\x18', '\x80', '\x3', '\x2', '\x2', 
		'\x2', '\x1A', '\x95', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x9C', '\x3', 
		'\x2', '\x2', '\x2', '\x1E', '\xA2', '\x3', '\x2', '\x2', '\x2', ' ', 
		'\xA6', '\x3', '\x2', '\x2', '\x2', '\"', '\xB2', '\x3', '\x2', '\x2', 
		'\x2', '$', '\xB8', '\x3', '\x2', '\x2', '\x2', '&', '\xC3', '\x3', '\x2', 
		'\x2', '\x2', '(', ')', '\x5', '$', '\x13', '\x2', ')', '\x3', '\x3', 
		'\x2', '\x2', '\x2', '*', '+', '\a', '\x3', '\x2', '\x2', '+', ',', '\a', 
		'#', '\x2', '\x2', ',', '-', '\a', '\x4', '\x2', '\x2', '-', '.', '\a', 
		'#', '\x2', '\x2', '.', '/', '\a', '\x5', '\x2', '\x2', '/', '\x5', '\x3', 
		'\x2', '\x2', '\x2', '\x30', '\x31', '\a', '\x6', '\x2', '\x2', '\x31', 
		'\x36', '\a', '\"', '\x2', '\x2', '\x32', '\x33', '\a', '\a', '\x2', '\x2', 
		'\x33', '\x35', '\a', '\"', '\x2', '\x2', '\x34', '\x32', '\x3', '\x2', 
		'\x2', '\x2', '\x35', '\x38', '\x3', '\x2', '\x2', '\x2', '\x36', '\x34', 
		'\x3', '\x2', '\x2', '\x2', '\x36', '\x37', '\x3', '\x2', '\x2', '\x2', 
		'\x37', '\x39', '\x3', '\x2', '\x2', '\x2', '\x38', '\x36', '\x3', '\x2', 
		'\x2', '\x2', '\x39', ';', '\a', '\b', '\x2', '\x2', ':', '<', '\x5', 
		'\f', '\a', '\x2', ';', ':', '\x3', '\x2', '\x2', '\x2', '<', '=', '\x3', 
		'\x2', '\x2', '\x2', '=', ';', '\x3', '\x2', '\x2', '\x2', '=', '>', '\x3', 
		'\x2', '\x2', '\x2', '>', '?', '\x3', '\x2', '\x2', '\x2', '?', '@', '\a', 
		'\t', '\x2', '\x2', '@', '\a', '\x3', '\x2', '\x2', '\x2', '\x41', '\x42', 
		'\a', '\n', '\x2', '\x2', '\x42', '\x43', '\a', '\"', '\x2', '\x2', '\x43', 
		'\x44', '\a', '\b', '\x2', '\x2', '\x44', '\x45', '\x5', '\x10', '\t', 
		'\x2', '\x45', '\x46', '\a', '\t', '\x2', '\x2', '\x46', '\t', '\x3', 
		'\x2', '\x2', '\x2', 'G', 'H', '\a', '\v', '\x2', '\x2', 'H', 'L', '\a', 
		'\b', '\x2', '\x2', 'I', 'K', '\x5', '\x1A', '\xE', '\x2', 'J', 'I', '\x3', 
		'\x2', '\x2', '\x2', 'K', 'N', '\x3', '\x2', '\x2', '\x2', 'L', 'J', '\x3', 
		'\x2', '\x2', '\x2', 'L', 'M', '\x3', '\x2', '\x2', '\x2', 'M', 'O', '\x3', 
		'\x2', '\x2', '\x2', 'N', 'L', '\x3', '\x2', '\x2', '\x2', 'O', 'P', '\a', 
		'\t', '\x2', '\x2', 'P', '\v', '\x3', '\x2', '\x2', '\x2', 'Q', 'R', '\x5', 
		'\xE', '\b', '\x2', 'R', '\r', '\x3', '\x2', '\x2', '\x2', 'S', 'T', '\a', 
		'\"', '\x2', '\x2', 'T', 'U', '\a', '\f', '\x2', '\x2', 'U', 'Z', '\a', 
		'$', '\x2', '\x2', 'V', 'W', '\a', '\a', '\x2', '\x2', 'W', 'Y', '\a', 
		'$', '\x2', '\x2', 'X', 'V', '\x3', '\x2', '\x2', '\x2', 'Y', '\\', '\x3', 
		'\x2', '\x2', '\x2', 'Z', 'X', '\x3', '\x2', '\x2', '\x2', 'Z', '[', '\x3', 
		'\x2', '\x2', '\x2', '[', ']', '\x3', '\x2', '\x2', '\x2', '\\', 'Z', 
		'\x3', '\x2', '\x2', '\x2', ']', '^', '\a', '\x5', '\x2', '\x2', '^', 
		'\xF', '\x3', '\x2', '\x2', '\x2', '_', '\x61', '\x5', '\x12', '\n', '\x2', 
		'`', '_', '\x3', '\x2', '\x2', '\x2', '\x61', '\x64', '\x3', '\x2', '\x2', 
		'\x2', '\x62', '`', '\x3', '\x2', '\x2', '\x2', '\x62', '\x63', '\x3', 
		'\x2', '\x2', '\x2', '\x63', '\x11', '\x3', '\x2', '\x2', '\x2', '\x64', 
		'\x62', '\x3', '\x2', '\x2', '\x2', '\x65', 'l', '\x5', '\x14', '\v', 
		'\x2', '\x66', 'l', '\x5', '\x16', '\f', '\x2', 'g', 'l', '\x5', '\x18', 
		'\r', '\x2', 'h', 'l', '\x5', '\x1A', '\xE', '\x2', 'i', 'l', '\x5', '\x1C', 
		'\xF', '\x2', 'j', 'l', '\x5', '\x1E', '\x10', '\x2', 'k', '\x65', '\x3', 
		'\x2', '\x2', '\x2', 'k', '\x66', '\x3', '\x2', '\x2', '\x2', 'k', 'g', 
		'\x3', '\x2', '\x2', '\x2', 'k', 'h', '\x3', '\x2', '\x2', '\x2', 'k', 
		'i', '\x3', '\x2', '\x2', '\x2', 'k', 'j', '\x3', '\x2', '\x2', '\x2', 
		'l', '\x13', '\x3', '\x2', '\x2', '\x2', 'm', 'n', '\a', '\r', '\x2', 
		'\x2', 'n', 'o', '\a', '\xE', '\x2', '\x2', 'o', 'p', '\x5', '$', '\x13', 
		'\x2', 'p', 'q', '\a', '\xF', '\x2', '\x2', 'q', 't', '\x5', '\x12', '\n', 
		'\x2', 'r', 's', '\a', '\x10', '\x2', '\x2', 's', 'u', '\x5', '\x12', 
		'\n', '\x2', 't', 'r', '\x3', '\x2', '\x2', '\x2', 't', 'u', '\x3', '\x2', 
		'\x2', '\x2', 'u', '\x15', '\x3', '\x2', '\x2', '\x2', 'v', 'w', '\a', 
		'\x11', '\x2', '\x2', 'w', 'x', '\a', '\xE', '\x2', '\x2', 'x', 'y', '\x5', 
		'$', '\x13', '\x2', 'y', 'z', '\a', '\x5', '\x2', '\x2', 'z', '{', '\x5', 
		'$', '\x13', '\x2', '{', '|', '\a', '\x5', '\x2', '\x2', '|', '}', '\x5', 
		'$', '\x13', '\x2', '}', '~', '\a', '\xF', '\x2', '\x2', '~', '\x7F', 
		'\x5', '\x12', '\n', '\x2', '\x7F', '\x17', '\x3', '\x2', '\x2', '\x2', 
		'\x80', '\x87', '\a', '\"', '\x2', '\x2', '\x81', '\x82', '\a', '\x12', 
		'\x2', '\x2', '\x82', '\x83', '\x5', '$', '\x13', '\x2', '\x83', '\x84', 
		'\a', '\a', '\x2', '\x2', '\x84', '\x85', '\x5', '$', '\x13', '\x2', '\x85', 
		'\x86', '\a', '\x13', '\x2', '\x2', '\x86', '\x88', '\x3', '\x2', '\x2', 
		'\x2', '\x87', '\x81', '\x3', '\x2', '\x2', '\x2', '\x87', '\x88', '\x3', 
		'\x2', '\x2', '\x2', '\x88', '\x8B', '\x3', '\x2', '\x2', '\x2', '\x89', 
		'\x8A', '\a', '\x14', '\x2', '\x2', '\x8A', '\x8C', '\a', '\"', '\x2', 
		'\x2', '\x8B', '\x89', '\x3', '\x2', '\x2', '\x2', '\x8B', '\x8C', '\x3', 
		'\x2', '\x2', '\x2', '\x8C', '\x8D', '\x3', '\x2', '\x2', '\x2', '\x8D', 
		'\x91', '\a', '\x15', '\x2', '\x2', '\x8E', '\x92', '\x5', '$', '\x13', 
		'\x2', '\x8F', '\x92', '\a', '\"', '\x2', '\x2', '\x90', '\x92', '\a', 
		'$', '\x2', '\x2', '\x91', '\x8E', '\x3', '\x2', '\x2', '\x2', '\x91', 
		'\x8F', '\x3', '\x2', '\x2', '\x2', '\x91', '\x90', '\x3', '\x2', '\x2', 
		'\x2', '\x92', '\x93', '\x3', '\x2', '\x2', '\x2', '\x93', '\x94', '\a', 
		'\x5', '\x2', '\x2', '\x94', '\x19', '\x3', '\x2', '\x2', '\x2', '\x95', 
		'\x96', '\a', '\x12', '\x2', '\x2', '\x96', '\x97', '\a', '\"', '\x2', 
		'\x2', '\x97', '\x98', '\a', '\x13', '\x2', '\x2', '\x98', '\x99', '\a', 
		'\b', '\x2', '\x2', '\x99', '\x9A', '\x5', '\x10', '\t', '\x2', '\x9A', 
		'\x9B', '\a', '\t', '\x2', '\x2', '\x9B', '\x1B', '\x3', '\x2', '\x2', 
		'\x2', '\x9C', '\x9E', '\a', '\b', '\x2', '\x2', '\x9D', '\x9F', '\x5', 
		' ', '\x11', '\x2', '\x9E', '\x9D', '\x3', '\x2', '\x2', '\x2', '\x9E', 
		'\x9F', '\x3', '\x2', '\x2', '\x2', '\x9F', '\xA0', '\x3', '\x2', '\x2', 
		'\x2', '\xA0', '\xA1', '\a', '\t', '\x2', '\x2', '\xA1', '\x1D', '\x3', 
		'\x2', '\x2', '\x2', '\xA2', '\xA3', '\a', '\x16', '\x2', '\x2', '\xA3', 
		'\xA4', '\x5', '$', '\x13', '\x2', '\xA4', '\xA5', '\a', '\x5', '\x2', 
		'\x2', '\xA5', '\x1F', '\x3', '\x2', '\x2', '\x2', '\xA6', '\xA7', '\b', 
		'\x11', '\x1', '\x2', '\xA7', '\xA8', '\x5', '\"', '\x12', '\x2', '\xA8', 
		'\xAD', '\x3', '\x2', '\x2', '\x2', '\xA9', '\xAA', '\f', '\x3', '\x2', 
		'\x2', '\xAA', '\xAC', '\x5', '\"', '\x12', '\x2', '\xAB', '\xA9', '\x3', 
		'\x2', '\x2', '\x2', '\xAC', '\xAF', '\x3', '\x2', '\x2', '\x2', '\xAD', 
		'\xAB', '\x3', '\x2', '\x2', '\x2', '\xAD', '\xAE', '\x3', '\x2', '\x2', 
		'\x2', '\xAE', '!', '\x3', '\x2', '\x2', '\x2', '\xAF', '\xAD', '\x3', 
		'\x2', '\x2', '\x2', '\xB0', '\xB3', '\x5', '\x12', '\n', '\x2', '\xB1', 
		'\xB3', '\x5', '\f', '\a', '\x2', '\xB2', '\xB0', '\x3', '\x2', '\x2', 
		'\x2', '\xB2', '\xB1', '\x3', '\x2', '\x2', '\x2', '\xB3', '#', '\x3', 
		'\x2', '\x2', '\x2', '\xB4', '\xB5', '\b', '\x13', '\x1', '\x2', '\xB5', 
		'\xB9', '\a', '#', '\x2', '\x2', '\xB6', '\xB9', '\a', '\"', '\x2', '\x2', 
		'\xB7', '\xB9', '\a', '$', '\x2', '\x2', '\xB8', '\xB4', '\x3', '\x2', 
		'\x2', '\x2', '\xB8', '\xB6', '\x3', '\x2', '\x2', '\x2', '\xB8', '\xB7', 
		'\x3', '\x2', '\x2', '\x2', '\xB9', '\xC0', '\x3', '\x2', '\x2', '\x2', 
		'\xBA', '\xBB', '\f', '\x3', '\x2', '\x2', '\xBB', '\xBC', '\x5', '&', 
		'\x14', '\x2', '\xBC', '\xBD', '\x5', '$', '\x13', '\x4', '\xBD', '\xBF', 
		'\x3', '\x2', '\x2', '\x2', '\xBE', '\xBA', '\x3', '\x2', '\x2', '\x2', 
		'\xBF', '\xC2', '\x3', '\x2', '\x2', '\x2', '\xC0', '\xBE', '\x3', '\x2', 
		'\x2', '\x2', '\xC0', '\xC1', '\x3', '\x2', '\x2', '\x2', '\xC1', '%', 
		'\x3', '\x2', '\x2', '\x2', '\xC2', '\xC0', '\x3', '\x2', '\x2', '\x2', 
		'\xC3', '\xC4', '\t', '\x2', '\x2', '\x2', '\xC4', '\'', '\x3', '\x2', 
		'\x2', '\x2', '\x11', '\x36', '=', 'L', 'Z', '\x62', 'k', 't', '\x87', 
		'\x8B', '\x91', '\x9E', '\xAD', '\xB2', '\xB8', '\xC0',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
