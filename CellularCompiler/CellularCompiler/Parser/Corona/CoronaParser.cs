//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Grammar/Corona.g4 by ANTLR 4.7.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.2")]
[System.CLSCompliant(false)]
public partial class CoronaParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, ID=33, INT=34, STRING=35, COMMENT=36, WS=37, CR=38, NL=39, CRNL=40, 
		TAB=41;
	public const int
		RULE_main = 0, RULE_grid = 1, RULE_states = 2, RULE_initial = 3, RULE_rules = 4, 
		RULE_memberDeclaration = 5, RULE_gridDeclaration = 6, RULE_statement = 7, 
		RULE_ruleStatement = 8, RULE_iterationStatement = 9, RULE_assignmentStatement = 10, 
		RULE_compoundStatement = 11, RULE_returnStatement = 12, RULE_caseStatement = 13, 
		RULE_expr = 14, RULE_operator = 15, RULE_comparisonOperator = 16, RULE_memberValue = 17, 
		RULE_member = 18, RULE_gridPoint = 19, RULE_arrowValue = 20, RULE_matchElement = 21;
	public static readonly string[] ruleNames = {
		"main", "grid", "states", "initial", "rules", "memberDeclaration", "gridDeclaration", 
		"statement", "ruleStatement", "iterationStatement", "assignmentStatement", 
		"compoundStatement", "returnStatement", "caseStatement", "expr", "operator", 
		"comparisonOperator", "memberValue", "member", "gridPoint", "arrowValue", 
		"matchElement"
	};

	private static readonly string[] _LiteralNames = {
		null, "'GRID'", "'{'", "'}'", "'STATES'", "','", "'INITIAL'", "'RULES'", 
		"':'", "';'", "'match'", "'('", "')'", "'for'", "'='", "'return'", "'['", 
		"'_'", "']'", "'+'", "'-'", "'*'", "'/'", "'=='", "'!='", "'<'", "'>'", 
		"'<='", "'>='", "'.'", "'.state'", "'grid['", "'->'", null, null, null, 
		null, null, "'\r'", "'\n'", "'\r\n'", "'\t'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, "ID", "INT", "STRING", 
		"COMMENT", "WS", "CR", "NL", "CRNL", "TAB"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Corona.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static CoronaParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public CoronaParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public CoronaParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class MainContext : ParserRuleContext {
		public GridContext grid() {
			return GetRuleContext<GridContext>(0);
		}
		public InitialContext initial() {
			return GetRuleContext<InitialContext>(0);
		}
		public RulesContext rules() {
			return GetRuleContext<RulesContext>(0);
		}
		public StatesContext[] states() {
			return GetRuleContexts<StatesContext>();
		}
		public StatesContext states(int i) {
			return GetRuleContext<StatesContext>(i);
		}
		public MainContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_main; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.EnterMain(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.ExitMain(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoronaVisitor<TResult> typedVisitor = visitor as ICoronaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMain(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MainContext main() {
		MainContext _localctx = new MainContext(Context, State);
		EnterRule(_localctx, 0, RULE_main);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 44; grid();
			State = 46;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 45; states();
				}
				}
				State = 48;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==T__3 );
			State = 50; initial();
			State = 51; rules();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GridContext : ParserRuleContext {
		public GridDeclarationContext[] gridDeclaration() {
			return GetRuleContexts<GridDeclarationContext>();
		}
		public GridDeclarationContext gridDeclaration(int i) {
			return GetRuleContext<GridDeclarationContext>(i);
		}
		public GridContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_grid; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.EnterGrid(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.ExitGrid(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoronaVisitor<TResult> typedVisitor = visitor as ICoronaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGrid(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GridContext grid() {
		GridContext _localctx = new GridContext(Context, State);
		EnterRule(_localctx, 2, RULE_grid);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 53; Match(T__0);
			State = 54; Match(T__1);
			State = 56;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 55; gridDeclaration();
				}
				}
				State = 58;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==ID );
			State = 60; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatesContext : ParserRuleContext {
		public ITerminalNode[] ID() { return GetTokens(CoronaParser.ID); }
		public ITerminalNode ID(int i) {
			return GetToken(CoronaParser.ID, i);
		}
		public MemberDeclarationContext[] memberDeclaration() {
			return GetRuleContexts<MemberDeclarationContext>();
		}
		public MemberDeclarationContext memberDeclaration(int i) {
			return GetRuleContext<MemberDeclarationContext>(i);
		}
		public StatesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_states; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.EnterStates(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.ExitStates(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoronaVisitor<TResult> typedVisitor = visitor as ICoronaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStates(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatesContext states() {
		StatesContext _localctx = new StatesContext(Context, State);
		EnterRule(_localctx, 4, RULE_states);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 62; Match(T__3);
			State = 63; Match(ID);
			State = 68;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__4) {
				{
				{
				State = 64; Match(T__4);
				State = 65; Match(ID);
				}
				}
				State = 70;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 71; Match(T__1);
			State = 75;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ID) {
				{
				{
				State = 72; memberDeclaration();
				}
				}
				State = 77;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 78; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitialContext : ParserRuleContext {
		public CompoundStatementContext compoundStatement() {
			return GetRuleContext<CompoundStatementContext>(0);
		}
		public InitialContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initial; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.EnterInitial(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.ExitInitial(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoronaVisitor<TResult> typedVisitor = visitor as ICoronaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInitial(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InitialContext initial() {
		InitialContext _localctx = new InitialContext(Context, State);
		EnterRule(_localctx, 6, RULE_initial);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 80; Match(T__5);
			State = 81; compoundStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RulesContext : ParserRuleContext {
		public RuleStatementContext[] ruleStatement() {
			return GetRuleContexts<RuleStatementContext>();
		}
		public RuleStatementContext ruleStatement(int i) {
			return GetRuleContext<RuleStatementContext>(i);
		}
		public RulesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rules; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.EnterRules(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.ExitRules(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoronaVisitor<TResult> typedVisitor = visitor as ICoronaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRules(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RulesContext rules() {
		RulesContext _localctx = new RulesContext(Context, State);
		EnterRule(_localctx, 8, RULE_rules);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 83; Match(T__6);
			State = 84; Match(T__1);
			State = 88;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__9) {
				{
				{
				State = 85; ruleStatement();
				}
				}
				State = 90;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 91; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberDeclarationContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(CoronaParser.ID, 0); }
		public MemberValueContext[] memberValue() {
			return GetRuleContexts<MemberValueContext>();
		}
		public MemberValueContext memberValue(int i) {
			return GetRuleContext<MemberValueContext>(i);
		}
		public MemberDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.EnterMemberDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.ExitMemberDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoronaVisitor<TResult> typedVisitor = visitor as ICoronaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemberDeclarationContext memberDeclaration() {
		MemberDeclarationContext _localctx = new MemberDeclarationContext(Context, State);
		EnterRule(_localctx, 10, RULE_memberDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 93; Match(ID);
			State = 94; Match(T__7);
			State = 95; memberValue();
			State = 100;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__4) {
				{
				{
				State = 96; Match(T__4);
				State = 97; memberValue();
				}
				}
				State = 102;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 103; Match(T__8);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GridDeclarationContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(CoronaParser.ID, 0); }
		public ITerminalNode INT() { return GetToken(CoronaParser.INT, 0); }
		public GridDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_gridDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.EnterGridDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.ExitGridDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoronaVisitor<TResult> typedVisitor = visitor as ICoronaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGridDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GridDeclarationContext gridDeclaration() {
		GridDeclarationContext _localctx = new GridDeclarationContext(Context, State);
		EnterRule(_localctx, 12, RULE_gridDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 105; Match(ID);
			State = 106; Match(T__7);
			State = 107; Match(INT);
			State = 108; Match(T__8);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public IterationStatementContext iterationStatement() {
			return GetRuleContext<IterationStatementContext>(0);
		}
		public AssignmentStatementContext assignmentStatement() {
			return GetRuleContext<AssignmentStatementContext>(0);
		}
		public CompoundStatementContext compoundStatement() {
			return GetRuleContext<CompoundStatementContext>(0);
		}
		public ReturnStatementContext returnStatement() {
			return GetRuleContext<ReturnStatementContext>(0);
		}
		public RuleStatementContext ruleStatement() {
			return GetRuleContext<RuleStatementContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoronaVisitor<TResult> typedVisitor = visitor as ICoronaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 14, RULE_statement);
		try {
			State = 115;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__12:
				EnterOuterAlt(_localctx, 1);
				{
				State = 110; iterationStatement();
				}
				break;
			case T__30:
			case ID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 111; assignmentStatement();
				}
				break;
			case T__1:
				EnterOuterAlt(_localctx, 3);
				{
				State = 112; compoundStatement();
				}
				break;
			case T__14:
				EnterOuterAlt(_localctx, 4);
				{
				State = 113; returnStatement();
				}
				break;
			case T__9:
				EnterOuterAlt(_localctx, 5);
				{
				State = 114; ruleStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RuleStatementContext : ParserRuleContext {
		public MatchElementContext matchElement() {
			return GetRuleContext<MatchElementContext>(0);
		}
		public CaseStatementContext[] caseStatement() {
			return GetRuleContexts<CaseStatementContext>();
		}
		public CaseStatementContext caseStatement(int i) {
			return GetRuleContext<CaseStatementContext>(i);
		}
		public RuleStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ruleStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.EnterRuleStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.ExitRuleStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoronaVisitor<TResult> typedVisitor = visitor as ICoronaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRuleStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RuleStatementContext ruleStatement() {
		RuleStatementContext _localctx = new RuleStatementContext(Context, State);
		EnterRule(_localctx, 16, RULE_ruleStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 117; Match(T__9);
			State = 118; Match(T__10);
			State = 119; matchElement();
			State = 120; Match(T__11);
			State = 121; Match(T__1);
			State = 123;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 122; caseStatement();
				}
				}
				State = 125;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==T__15 );
			State = 127; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IterationStatementContext : ParserRuleContext {
		public ExprContext initializer;
		public ExprContext condition;
		public ExprContext iterator;
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public IterationStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iterationStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.EnterIterationStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.ExitIterationStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoronaVisitor<TResult> typedVisitor = visitor as ICoronaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIterationStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IterationStatementContext iterationStatement() {
		IterationStatementContext _localctx = new IterationStatementContext(Context, State);
		EnterRule(_localctx, 18, RULE_iterationStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 129; Match(T__12);
			State = 130; Match(T__10);
			State = 131; _localctx.initializer = expr(0);
			State = 132; Match(T__8);
			State = 133; _localctx.condition = expr(0);
			State = 134; Match(T__8);
			State = 135; _localctx.iterator = expr(0);
			State = 136; Match(T__11);
			State = 137; statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentStatementContext : ParserRuleContext {
		public AssignmentStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentStatement; } }
	 
		public AssignmentStatementContext() { }
		public virtual void CopyFrom(AssignmentStatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class GridAssignStatementContext : AssignmentStatementContext {
		public GridPointContext gridPoint() {
			return GetRuleContext<GridPointContext>(0);
		}
		public ITerminalNode ID() { return GetToken(CoronaParser.ID, 0); }
		public MemberContext member() {
			return GetRuleContext<MemberContext>(0);
		}
		public GridAssignStatementContext(AssignmentStatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.EnterGridAssignStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.ExitGridAssignStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoronaVisitor<TResult> typedVisitor = visitor as ICoronaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGridAssignStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdentifierAssignStatementContext : AssignmentStatementContext {
		public ITerminalNode ID() { return GetToken(CoronaParser.ID, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode STRING() { return GetToken(CoronaParser.STRING, 0); }
		public IdentifierAssignStatementContext(AssignmentStatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.EnterIdentifierAssignStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.ExitIdentifierAssignStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoronaVisitor<TResult> typedVisitor = visitor as ICoronaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierAssignStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentStatementContext assignmentStatement() {
		AssignmentStatementContext _localctx = new AssignmentStatementContext(Context, State);
		EnterRule(_localctx, 20, RULE_assignmentStatement);
		int _la;
		try {
			State = 154;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__30:
				_localctx = new GridAssignStatementContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 139; gridPoint();
				State = 141;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__28 || _la==T__29) {
					{
					State = 140; member();
					}
				}

				State = 143; Match(T__13);
				State = 144; Match(ID);
				State = 145; Match(T__8);
				}
				break;
			case ID:
				_localctx = new IdentifierAssignStatementContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 147; Match(ID);
				State = 148; Match(T__13);
				State = 151;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__28:
				case T__29:
				case ID:
				case INT:
					{
					State = 149; expr(0);
					}
					break;
				case STRING:
					{
					State = 150; Match(STRING);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 153; Match(T__8);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompoundStatementContext : ParserRuleContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public CompoundStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compoundStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.EnterCompoundStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.ExitCompoundStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoronaVisitor<TResult> typedVisitor = visitor as ICoronaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompoundStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompoundStatementContext compoundStatement() {
		CompoundStatementContext _localctx = new CompoundStatementContext(Context, State);
		EnterRule(_localctx, 22, RULE_compoundStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 156; Match(T__1);
			State = 160;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__1) | (1L << T__9) | (1L << T__12) | (1L << T__14) | (1L << T__30) | (1L << ID))) != 0)) {
				{
				{
				State = 157; statement();
				}
				}
				State = 162;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 163; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStatementContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(CoronaParser.ID, 0); }
		public ReturnStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.EnterReturnStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.ExitReturnStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoronaVisitor<TResult> typedVisitor = visitor as ICoronaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStatementContext returnStatement() {
		ReturnStatementContext _localctx = new ReturnStatementContext(Context, State);
		EnterRule(_localctx, 24, RULE_returnStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 165; Match(T__14);
			State = 166; Match(ID);
			State = 167; Match(T__8);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseStatementContext : ParserRuleContext {
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public MemberValueContext memberValue() {
			return GetRuleContext<MemberValueContext>(0);
		}
		public ITerminalNode ID() { return GetToken(CoronaParser.ID, 0); }
		public CaseStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.EnterCaseStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.ExitCaseStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoronaVisitor<TResult> typedVisitor = visitor as ICoronaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CaseStatementContext caseStatement() {
		CaseStatementContext _localctx = new CaseStatementContext(Context, State);
		EnterRule(_localctx, 26, RULE_caseStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 169; Match(T__15);
			State = 173;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INT:
			case STRING:
				{
				State = 170; memberValue();
				}
				break;
			case ID:
				{
				State = 171; Match(ID);
				}
				break;
			case T__16:
				{
				State = 172; Match(T__16);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 175; Match(T__17);
			State = 176; statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
	 
		public ExprContext() { }
		public virtual void CopyFrom(ExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NumberExprContext : ExprContext {
		public IToken value;
		public ITerminalNode INT() { return GetToken(CoronaParser.INT, 0); }
		public NumberExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.EnterNumberExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.ExitNumberExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoronaVisitor<TResult> typedVisitor = visitor as ICoronaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumberExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ComparisonExprContext : ExprContext {
		public ExprContext left;
		public ComparisonOperatorContext op;
		public ExprContext right;
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ComparisonOperatorContext comparisonOperator() {
			return GetRuleContext<ComparisonOperatorContext>(0);
		}
		public ComparisonExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.EnterComparisonExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.ExitComparisonExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoronaVisitor<TResult> typedVisitor = visitor as ICoronaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparisonExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdentifierExprContext : ExprContext {
		public IToken value;
		public ITerminalNode ID() { return GetToken(CoronaParser.ID, 0); }
		public MemberContext member() {
			return GetRuleContext<MemberContext>(0);
		}
		public IdentifierExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.EnterIdentifierExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.ExitIdentifierExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoronaVisitor<TResult> typedVisitor = visitor as ICoronaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class InfixExprContext : ExprContext {
		public ExprContext left;
		public OperatorContext op;
		public ExprContext right;
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public OperatorContext @operator() {
			return GetRuleContext<OperatorContext>(0);
		}
		public InfixExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.EnterInfixExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.ExitInfixExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoronaVisitor<TResult> typedVisitor = visitor as ICoronaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInfixExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(Context, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 28;
		EnterRecursionRule(_localctx, 28, RULE_expr, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 182;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INT:
				{
				_localctx = new NumberExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 179; ((NumberExprContext)_localctx).value = Match(INT);
				}
				break;
			case ID:
				{
				_localctx = new IdentifierExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 180; ((IdentifierExprContext)_localctx).value = Match(ID);
				}
				break;
			case T__28:
			case T__29:
				{
				_localctx = new IdentifierExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 181; member();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 194;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 192;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
					case 1:
						{
						_localctx = new InfixExprContext(new ExprContext(_parentctx, _parentState));
						((InfixExprContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 184;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 185; ((InfixExprContext)_localctx).op = @operator();
						State = 186; ((InfixExprContext)_localctx).right = expr(3);
						}
						break;
					case 2:
						{
						_localctx = new ComparisonExprContext(new ExprContext(_parentctx, _parentState));
						((ComparisonExprContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 188;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 189; ((ComparisonExprContext)_localctx).op = comparisonOperator();
						State = 190; ((ComparisonExprContext)_localctx).right = expr(2);
						}
						break;
					}
					} 
				}
				State = 196;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class OperatorContext : ParserRuleContext {
		public OperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.EnterOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.ExitOperator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoronaVisitor<TResult> typedVisitor = visitor as ICoronaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorContext @operator() {
		OperatorContext _localctx = new OperatorContext(Context, State);
		EnterRule(_localctx, 30, RULE_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 197;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__18) | (1L << T__19) | (1L << T__20) | (1L << T__21))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComparisonOperatorContext : ParserRuleContext {
		public ComparisonOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparisonOperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.EnterComparisonOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.ExitComparisonOperator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoronaVisitor<TResult> typedVisitor = visitor as ICoronaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparisonOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComparisonOperatorContext comparisonOperator() {
		ComparisonOperatorContext _localctx = new ComparisonOperatorContext(Context, State);
		EnterRule(_localctx, 32, RULE_comparisonOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 199;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__22) | (1L << T__23) | (1L << T__24) | (1L << T__25) | (1L << T__26) | (1L << T__27))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberValueContext : ParserRuleContext {
		public MemberValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberValue; } }
	 
		public MemberValueContext() { }
		public virtual void CopyFrom(MemberValueContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class IntMemberValueContext : MemberValueContext {
		public IToken value;
		public ITerminalNode INT() { return GetToken(CoronaParser.INT, 0); }
		public IntMemberValueContext(MemberValueContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.EnterIntMemberValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.ExitIntMemberValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoronaVisitor<TResult> typedVisitor = visitor as ICoronaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntMemberValue(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StringMemberValueContext : MemberValueContext {
		public IToken value;
		public ITerminalNode STRING() { return GetToken(CoronaParser.STRING, 0); }
		public StringMemberValueContext(MemberValueContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.EnterStringMemberValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.ExitStringMemberValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoronaVisitor<TResult> typedVisitor = visitor as ICoronaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringMemberValue(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ArrowMemberValueContext : MemberValueContext {
		public ArrowValueContext arrowValue() {
			return GetRuleContext<ArrowValueContext>(0);
		}
		public ArrowMemberValueContext(MemberValueContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.EnterArrowMemberValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.ExitArrowMemberValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoronaVisitor<TResult> typedVisitor = visitor as ICoronaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrowMemberValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemberValueContext memberValue() {
		MemberValueContext _localctx = new MemberValueContext(Context, State);
		EnterRule(_localctx, 34, RULE_memberValue);
		try {
			State = 204;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
			case 1:
				_localctx = new ArrowMemberValueContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 201; arrowValue();
				}
				break;
			case 2:
				_localctx = new IntMemberValueContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 202; ((IntMemberValueContext)_localctx).value = Match(INT);
				}
				break;
			case 3:
				_localctx = new StringMemberValueContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 203; ((StringMemberValueContext)_localctx).value = Match(STRING);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(CoronaParser.ID, 0); }
		public MemberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_member; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.EnterMember(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.ExitMember(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoronaVisitor<TResult> typedVisitor = visitor as ICoronaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMember(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemberContext member() {
		MemberContext _localctx = new MemberContext(Context, State);
		EnterRule(_localctx, 36, RULE_member);
		try {
			State = 209;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__28:
				EnterOuterAlt(_localctx, 1);
				{
				State = 206; Match(T__28);
				State = 207; Match(ID);
				}
				break;
			case T__29:
				EnterOuterAlt(_localctx, 2);
				{
				State = 208; Match(T__29);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GridPointContext : ParserRuleContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public GridPointContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_gridPoint; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.EnterGridPoint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.ExitGridPoint(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoronaVisitor<TResult> typedVisitor = visitor as ICoronaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGridPoint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GridPointContext gridPoint() {
		GridPointContext _localctx = new GridPointContext(Context, State);
		EnterRule(_localctx, 38, RULE_gridPoint);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 211; Match(T__30);
			State = 212; expr(0);
			State = 217;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__4) {
				{
				{
				State = 213; Match(T__4);
				State = 214; expr(0);
				}
				}
				State = 219;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 220; Match(T__17);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrowValueContext : ParserRuleContext {
		public ITerminalNode[] INT() { return GetTokens(CoronaParser.INT); }
		public ITerminalNode INT(int i) {
			return GetToken(CoronaParser.INT, i);
		}
		public ArrowValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrowValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.EnterArrowValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.ExitArrowValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoronaVisitor<TResult> typedVisitor = visitor as ICoronaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrowValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrowValueContext arrowValue() {
		ArrowValueContext _localctx = new ArrowValueContext(Context, State);
		EnterRule(_localctx, 40, RULE_arrowValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 222; Match(INT);
			State = 223; Match(T__31);
			State = 224; Match(INT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MatchElementContext : ParserRuleContext {
		public MemberContext member() {
			return GetRuleContext<MemberContext>(0);
		}
		public GridPointContext gridPoint() {
			return GetRuleContext<GridPointContext>(0);
		}
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public MatchElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_matchElement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.EnterMatchElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.ExitMatchElement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoronaVisitor<TResult> typedVisitor = visitor as ICoronaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMatchElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MatchElementContext matchElement() {
		MatchElementContext _localctx = new MatchElementContext(Context, State);
		EnterRule(_localctx, 42, RULE_matchElement);
		int _la;
		try {
			State = 231;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 227;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__30) {
					{
					State = 226; gridPoint();
					}
				}

				State = 229; member();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 230; expr(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 14: return expr_sempred((ExprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 2);
		case 1: return Precpred(Context, 1);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '+', '\xEC', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x3', '\x2', '\x3', 
		'\x2', '\x6', '\x2', '\x31', '\n', '\x2', '\r', '\x2', '\xE', '\x2', '\x32', 
		'\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x6', '\x3', ';', '\n', '\x3', '\r', '\x3', '\xE', '\x3', 
		'<', '\x3', '\x3', '\x3', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\a', '\x4', '\x45', '\n', '\x4', '\f', '\x4', '\xE', '\x4', 
		'H', '\v', '\x4', '\x3', '\x4', '\x3', '\x4', '\a', '\x4', 'L', '\n', 
		'\x4', '\f', '\x4', '\xE', '\x4', 'O', '\v', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\a', '\x6', 'Y', '\n', '\x6', '\f', '\x6', '\xE', 
		'\x6', '\\', '\v', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\a', '\a', '\x65', '\n', 
		'\a', '\f', '\a', '\xE', '\a', 'h', '\v', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x5', '\t', 
		'v', '\n', '\t', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', 
		'\n', '\x3', '\n', '\x6', '\n', '~', '\n', '\n', '\r', '\n', '\xE', '\n', 
		'\x7F', '\x3', '\n', '\x3', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\f', '\x3', '\f', '\x5', '\f', '\x90', '\n', 
		'\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', 
		'\x3', '\f', '\x3', '\f', '\x3', '\f', '\x5', '\f', '\x9A', '\n', '\f', 
		'\x3', '\f', '\x5', '\f', '\x9D', '\n', '\f', '\x3', '\r', '\x3', '\r', 
		'\a', '\r', '\xA1', '\n', '\r', '\f', '\r', '\xE', '\r', '\xA4', '\v', 
		'\r', '\x3', '\r', '\x3', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', 
		'\x3', '\xE', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', 
		'\x5', '\xF', '\xB0', '\n', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x5', 
		'\x10', '\xB9', '\n', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\a', '\x10', '\xC3', '\n', '\x10', '\f', '\x10', '\xE', '\x10', '\xC6', 
		'\v', '\x10', '\x3', '\x11', '\x3', '\x11', '\x3', '\x12', '\x3', '\x12', 
		'\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x5', '\x13', '\xCF', '\n', 
		'\x13', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x5', '\x14', '\xD4', 
		'\n', '\x14', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', 
		'\a', '\x15', '\xDA', '\n', '\x15', '\f', '\x15', '\xE', '\x15', '\xDD', 
		'\v', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x16', '\x3', '\x16', 
		'\x3', '\x16', '\x3', '\x16', '\x3', '\x17', '\x5', '\x17', '\xE6', '\n', 
		'\x17', '\x3', '\x17', '\x3', '\x17', '\x5', '\x17', '\xEA', '\n', '\x17', 
		'\x3', '\x17', '\x2', '\x3', '\x1E', '\x18', '\x2', '\x4', '\x6', '\b', 
		'\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', 
		'\x1E', ' ', '\"', '$', '&', '(', '*', ',', '\x2', '\x4', '\x3', '\x2', 
		'\x15', '\x18', '\x3', '\x2', '\x19', '\x1E', '\x2', '\xF0', '\x2', '.', 
		'\x3', '\x2', '\x2', '\x2', '\x4', '\x37', '\x3', '\x2', '\x2', '\x2', 
		'\x6', '@', '\x3', '\x2', '\x2', '\x2', '\b', 'R', '\x3', '\x2', '\x2', 
		'\x2', '\n', 'U', '\x3', '\x2', '\x2', '\x2', '\f', '_', '\x3', '\x2', 
		'\x2', '\x2', '\xE', 'k', '\x3', '\x2', '\x2', '\x2', '\x10', 'u', '\x3', 
		'\x2', '\x2', '\x2', '\x12', 'w', '\x3', '\x2', '\x2', '\x2', '\x14', 
		'\x83', '\x3', '\x2', '\x2', '\x2', '\x16', '\x9C', '\x3', '\x2', '\x2', 
		'\x2', '\x18', '\x9E', '\x3', '\x2', '\x2', '\x2', '\x1A', '\xA7', '\x3', 
		'\x2', '\x2', '\x2', '\x1C', '\xAB', '\x3', '\x2', '\x2', '\x2', '\x1E', 
		'\xB8', '\x3', '\x2', '\x2', '\x2', ' ', '\xC7', '\x3', '\x2', '\x2', 
		'\x2', '\"', '\xC9', '\x3', '\x2', '\x2', '\x2', '$', '\xCE', '\x3', '\x2', 
		'\x2', '\x2', '&', '\xD3', '\x3', '\x2', '\x2', '\x2', '(', '\xD5', '\x3', 
		'\x2', '\x2', '\x2', '*', '\xE0', '\x3', '\x2', '\x2', '\x2', ',', '\xE9', 
		'\x3', '\x2', '\x2', '\x2', '.', '\x30', '\x5', '\x4', '\x3', '\x2', '/', 
		'\x31', '\x5', '\x6', '\x4', '\x2', '\x30', '/', '\x3', '\x2', '\x2', 
		'\x2', '\x31', '\x32', '\x3', '\x2', '\x2', '\x2', '\x32', '\x30', '\x3', 
		'\x2', '\x2', '\x2', '\x32', '\x33', '\x3', '\x2', '\x2', '\x2', '\x33', 
		'\x34', '\x3', '\x2', '\x2', '\x2', '\x34', '\x35', '\x5', '\b', '\x5', 
		'\x2', '\x35', '\x36', '\x5', '\n', '\x6', '\x2', '\x36', '\x3', '\x3', 
		'\x2', '\x2', '\x2', '\x37', '\x38', '\a', '\x3', '\x2', '\x2', '\x38', 
		':', '\a', '\x4', '\x2', '\x2', '\x39', ';', '\x5', '\xE', '\b', '\x2', 
		':', '\x39', '\x3', '\x2', '\x2', '\x2', ';', '<', '\x3', '\x2', '\x2', 
		'\x2', '<', ':', '\x3', '\x2', '\x2', '\x2', '<', '=', '\x3', '\x2', '\x2', 
		'\x2', '=', '>', '\x3', '\x2', '\x2', '\x2', '>', '?', '\a', '\x5', '\x2', 
		'\x2', '?', '\x5', '\x3', '\x2', '\x2', '\x2', '@', '\x41', '\a', '\x6', 
		'\x2', '\x2', '\x41', '\x46', '\a', '#', '\x2', '\x2', '\x42', '\x43', 
		'\a', '\a', '\x2', '\x2', '\x43', '\x45', '\a', '#', '\x2', '\x2', '\x44', 
		'\x42', '\x3', '\x2', '\x2', '\x2', '\x45', 'H', '\x3', '\x2', '\x2', 
		'\x2', '\x46', '\x44', '\x3', '\x2', '\x2', '\x2', '\x46', 'G', '\x3', 
		'\x2', '\x2', '\x2', 'G', 'I', '\x3', '\x2', '\x2', '\x2', 'H', '\x46', 
		'\x3', '\x2', '\x2', '\x2', 'I', 'M', '\a', '\x4', '\x2', '\x2', 'J', 
		'L', '\x5', '\f', '\a', '\x2', 'K', 'J', '\x3', '\x2', '\x2', '\x2', 'L', 
		'O', '\x3', '\x2', '\x2', '\x2', 'M', 'K', '\x3', '\x2', '\x2', '\x2', 
		'M', 'N', '\x3', '\x2', '\x2', '\x2', 'N', 'P', '\x3', '\x2', '\x2', '\x2', 
		'O', 'M', '\x3', '\x2', '\x2', '\x2', 'P', 'Q', '\a', '\x5', '\x2', '\x2', 
		'Q', '\a', '\x3', '\x2', '\x2', '\x2', 'R', 'S', '\a', '\b', '\x2', '\x2', 
		'S', 'T', '\x5', '\x18', '\r', '\x2', 'T', '\t', '\x3', '\x2', '\x2', 
		'\x2', 'U', 'V', '\a', '\t', '\x2', '\x2', 'V', 'Z', '\a', '\x4', '\x2', 
		'\x2', 'W', 'Y', '\x5', '\x12', '\n', '\x2', 'X', 'W', '\x3', '\x2', '\x2', 
		'\x2', 'Y', '\\', '\x3', '\x2', '\x2', '\x2', 'Z', 'X', '\x3', '\x2', 
		'\x2', '\x2', 'Z', '[', '\x3', '\x2', '\x2', '\x2', '[', ']', '\x3', '\x2', 
		'\x2', '\x2', '\\', 'Z', '\x3', '\x2', '\x2', '\x2', ']', '^', '\a', '\x5', 
		'\x2', '\x2', '^', '\v', '\x3', '\x2', '\x2', '\x2', '_', '`', '\a', '#', 
		'\x2', '\x2', '`', '\x61', '\a', '\n', '\x2', '\x2', '\x61', '\x66', '\x5', 
		'$', '\x13', '\x2', '\x62', '\x63', '\a', '\a', '\x2', '\x2', '\x63', 
		'\x65', '\x5', '$', '\x13', '\x2', '\x64', '\x62', '\x3', '\x2', '\x2', 
		'\x2', '\x65', 'h', '\x3', '\x2', '\x2', '\x2', '\x66', '\x64', '\x3', 
		'\x2', '\x2', '\x2', '\x66', 'g', '\x3', '\x2', '\x2', '\x2', 'g', 'i', 
		'\x3', '\x2', '\x2', '\x2', 'h', '\x66', '\x3', '\x2', '\x2', '\x2', 'i', 
		'j', '\a', '\v', '\x2', '\x2', 'j', '\r', '\x3', '\x2', '\x2', '\x2', 
		'k', 'l', '\a', '#', '\x2', '\x2', 'l', 'm', '\a', '\n', '\x2', '\x2', 
		'm', 'n', '\a', '$', '\x2', '\x2', 'n', 'o', '\a', '\v', '\x2', '\x2', 
		'o', '\xF', '\x3', '\x2', '\x2', '\x2', 'p', 'v', '\x5', '\x14', '\v', 
		'\x2', 'q', 'v', '\x5', '\x16', '\f', '\x2', 'r', 'v', '\x5', '\x18', 
		'\r', '\x2', 's', 'v', '\x5', '\x1A', '\xE', '\x2', 't', 'v', '\x5', '\x12', 
		'\n', '\x2', 'u', 'p', '\x3', '\x2', '\x2', '\x2', 'u', 'q', '\x3', '\x2', 
		'\x2', '\x2', 'u', 'r', '\x3', '\x2', '\x2', '\x2', 'u', 's', '\x3', '\x2', 
		'\x2', '\x2', 'u', 't', '\x3', '\x2', '\x2', '\x2', 'v', '\x11', '\x3', 
		'\x2', '\x2', '\x2', 'w', 'x', '\a', '\f', '\x2', '\x2', 'x', 'y', '\a', 
		'\r', '\x2', '\x2', 'y', 'z', '\x5', ',', '\x17', '\x2', 'z', '{', '\a', 
		'\xE', '\x2', '\x2', '{', '}', '\a', '\x4', '\x2', '\x2', '|', '~', '\x5', 
		'\x1C', '\xF', '\x2', '}', '|', '\x3', '\x2', '\x2', '\x2', '~', '\x7F', 
		'\x3', '\x2', '\x2', '\x2', '\x7F', '}', '\x3', '\x2', '\x2', '\x2', '\x7F', 
		'\x80', '\x3', '\x2', '\x2', '\x2', '\x80', '\x81', '\x3', '\x2', '\x2', 
		'\x2', '\x81', '\x82', '\a', '\x5', '\x2', '\x2', '\x82', '\x13', '\x3', 
		'\x2', '\x2', '\x2', '\x83', '\x84', '\a', '\xF', '\x2', '\x2', '\x84', 
		'\x85', '\a', '\r', '\x2', '\x2', '\x85', '\x86', '\x5', '\x1E', '\x10', 
		'\x2', '\x86', '\x87', '\a', '\v', '\x2', '\x2', '\x87', '\x88', '\x5', 
		'\x1E', '\x10', '\x2', '\x88', '\x89', '\a', '\v', '\x2', '\x2', '\x89', 
		'\x8A', '\x5', '\x1E', '\x10', '\x2', '\x8A', '\x8B', '\a', '\xE', '\x2', 
		'\x2', '\x8B', '\x8C', '\x5', '\x10', '\t', '\x2', '\x8C', '\x15', '\x3', 
		'\x2', '\x2', '\x2', '\x8D', '\x8F', '\x5', '(', '\x15', '\x2', '\x8E', 
		'\x90', '\x5', '&', '\x14', '\x2', '\x8F', '\x8E', '\x3', '\x2', '\x2', 
		'\x2', '\x8F', '\x90', '\x3', '\x2', '\x2', '\x2', '\x90', '\x91', '\x3', 
		'\x2', '\x2', '\x2', '\x91', '\x92', '\a', '\x10', '\x2', '\x2', '\x92', 
		'\x93', '\a', '#', '\x2', '\x2', '\x93', '\x94', '\a', '\v', '\x2', '\x2', 
		'\x94', '\x9D', '\x3', '\x2', '\x2', '\x2', '\x95', '\x96', '\a', '#', 
		'\x2', '\x2', '\x96', '\x99', '\a', '\x10', '\x2', '\x2', '\x97', '\x9A', 
		'\x5', '\x1E', '\x10', '\x2', '\x98', '\x9A', '\a', '%', '\x2', '\x2', 
		'\x99', '\x97', '\x3', '\x2', '\x2', '\x2', '\x99', '\x98', '\x3', '\x2', 
		'\x2', '\x2', '\x9A', '\x9B', '\x3', '\x2', '\x2', '\x2', '\x9B', '\x9D', 
		'\a', '\v', '\x2', '\x2', '\x9C', '\x8D', '\x3', '\x2', '\x2', '\x2', 
		'\x9C', '\x95', '\x3', '\x2', '\x2', '\x2', '\x9D', '\x17', '\x3', '\x2', 
		'\x2', '\x2', '\x9E', '\xA2', '\a', '\x4', '\x2', '\x2', '\x9F', '\xA1', 
		'\x5', '\x10', '\t', '\x2', '\xA0', '\x9F', '\x3', '\x2', '\x2', '\x2', 
		'\xA1', '\xA4', '\x3', '\x2', '\x2', '\x2', '\xA2', '\xA0', '\x3', '\x2', 
		'\x2', '\x2', '\xA2', '\xA3', '\x3', '\x2', '\x2', '\x2', '\xA3', '\xA5', 
		'\x3', '\x2', '\x2', '\x2', '\xA4', '\xA2', '\x3', '\x2', '\x2', '\x2', 
		'\xA5', '\xA6', '\a', '\x5', '\x2', '\x2', '\xA6', '\x19', '\x3', '\x2', 
		'\x2', '\x2', '\xA7', '\xA8', '\a', '\x11', '\x2', '\x2', '\xA8', '\xA9', 
		'\a', '#', '\x2', '\x2', '\xA9', '\xAA', '\a', '\v', '\x2', '\x2', '\xAA', 
		'\x1B', '\x3', '\x2', '\x2', '\x2', '\xAB', '\xAF', '\a', '\x12', '\x2', 
		'\x2', '\xAC', '\xB0', '\x5', '$', '\x13', '\x2', '\xAD', '\xB0', '\a', 
		'#', '\x2', '\x2', '\xAE', '\xB0', '\a', '\x13', '\x2', '\x2', '\xAF', 
		'\xAC', '\x3', '\x2', '\x2', '\x2', '\xAF', '\xAD', '\x3', '\x2', '\x2', 
		'\x2', '\xAF', '\xAE', '\x3', '\x2', '\x2', '\x2', '\xB0', '\xB1', '\x3', 
		'\x2', '\x2', '\x2', '\xB1', '\xB2', '\a', '\x14', '\x2', '\x2', '\xB2', 
		'\xB3', '\x5', '\x10', '\t', '\x2', '\xB3', '\x1D', '\x3', '\x2', '\x2', 
		'\x2', '\xB4', '\xB5', '\b', '\x10', '\x1', '\x2', '\xB5', '\xB9', '\a', 
		'$', '\x2', '\x2', '\xB6', '\xB9', '\a', '#', '\x2', '\x2', '\xB7', '\xB9', 
		'\x5', '&', '\x14', '\x2', '\xB8', '\xB4', '\x3', '\x2', '\x2', '\x2', 
		'\xB8', '\xB6', '\x3', '\x2', '\x2', '\x2', '\xB8', '\xB7', '\x3', '\x2', 
		'\x2', '\x2', '\xB9', '\xC4', '\x3', '\x2', '\x2', '\x2', '\xBA', '\xBB', 
		'\f', '\x4', '\x2', '\x2', '\xBB', '\xBC', '\x5', ' ', '\x11', '\x2', 
		'\xBC', '\xBD', '\x5', '\x1E', '\x10', '\x5', '\xBD', '\xC3', '\x3', '\x2', 
		'\x2', '\x2', '\xBE', '\xBF', '\f', '\x3', '\x2', '\x2', '\xBF', '\xC0', 
		'\x5', '\"', '\x12', '\x2', '\xC0', '\xC1', '\x5', '\x1E', '\x10', '\x4', 
		'\xC1', '\xC3', '\x3', '\x2', '\x2', '\x2', '\xC2', '\xBA', '\x3', '\x2', 
		'\x2', '\x2', '\xC2', '\xBE', '\x3', '\x2', '\x2', '\x2', '\xC3', '\xC6', 
		'\x3', '\x2', '\x2', '\x2', '\xC4', '\xC2', '\x3', '\x2', '\x2', '\x2', 
		'\xC4', '\xC5', '\x3', '\x2', '\x2', '\x2', '\xC5', '\x1F', '\x3', '\x2', 
		'\x2', '\x2', '\xC6', '\xC4', '\x3', '\x2', '\x2', '\x2', '\xC7', '\xC8', 
		'\t', '\x2', '\x2', '\x2', '\xC8', '!', '\x3', '\x2', '\x2', '\x2', '\xC9', 
		'\xCA', '\t', '\x3', '\x2', '\x2', '\xCA', '#', '\x3', '\x2', '\x2', '\x2', 
		'\xCB', '\xCF', '\x5', '*', '\x16', '\x2', '\xCC', '\xCF', '\a', '$', 
		'\x2', '\x2', '\xCD', '\xCF', '\a', '%', '\x2', '\x2', '\xCE', '\xCB', 
		'\x3', '\x2', '\x2', '\x2', '\xCE', '\xCC', '\x3', '\x2', '\x2', '\x2', 
		'\xCE', '\xCD', '\x3', '\x2', '\x2', '\x2', '\xCF', '%', '\x3', '\x2', 
		'\x2', '\x2', '\xD0', '\xD1', '\a', '\x1F', '\x2', '\x2', '\xD1', '\xD4', 
		'\a', '#', '\x2', '\x2', '\xD2', '\xD4', '\a', ' ', '\x2', '\x2', '\xD3', 
		'\xD0', '\x3', '\x2', '\x2', '\x2', '\xD3', '\xD2', '\x3', '\x2', '\x2', 
		'\x2', '\xD4', '\'', '\x3', '\x2', '\x2', '\x2', '\xD5', '\xD6', '\a', 
		'!', '\x2', '\x2', '\xD6', '\xDB', '\x5', '\x1E', '\x10', '\x2', '\xD7', 
		'\xD8', '\a', '\a', '\x2', '\x2', '\xD8', '\xDA', '\x5', '\x1E', '\x10', 
		'\x2', '\xD9', '\xD7', '\x3', '\x2', '\x2', '\x2', '\xDA', '\xDD', '\x3', 
		'\x2', '\x2', '\x2', '\xDB', '\xD9', '\x3', '\x2', '\x2', '\x2', '\xDB', 
		'\xDC', '\x3', '\x2', '\x2', '\x2', '\xDC', '\xDE', '\x3', '\x2', '\x2', 
		'\x2', '\xDD', '\xDB', '\x3', '\x2', '\x2', '\x2', '\xDE', '\xDF', '\a', 
		'\x14', '\x2', '\x2', '\xDF', ')', '\x3', '\x2', '\x2', '\x2', '\xE0', 
		'\xE1', '\a', '$', '\x2', '\x2', '\xE1', '\xE2', '\a', '\"', '\x2', '\x2', 
		'\xE2', '\xE3', '\a', '$', '\x2', '\x2', '\xE3', '+', '\x3', '\x2', '\x2', 
		'\x2', '\xE4', '\xE6', '\x5', '(', '\x15', '\x2', '\xE5', '\xE4', '\x3', 
		'\x2', '\x2', '\x2', '\xE5', '\xE6', '\x3', '\x2', '\x2', '\x2', '\xE6', 
		'\xE7', '\x3', '\x2', '\x2', '\x2', '\xE7', '\xEA', '\x5', '&', '\x14', 
		'\x2', '\xE8', '\xEA', '\x5', '\x1E', '\x10', '\x2', '\xE9', '\xE5', '\x3', 
		'\x2', '\x2', '\x2', '\xE9', '\xE8', '\x3', '\x2', '\x2', '\x2', '\xEA', 
		'-', '\x3', '\x2', '\x2', '\x2', '\x17', '\x32', '<', '\x46', 'M', 'Z', 
		'\x66', 'u', '\x7F', '\x8F', '\x99', '\x9C', '\xA2', '\xAF', '\xB8', '\xC2', 
		'\xC4', '\xCE', '\xD3', '\xDB', '\xE5', '\xE9',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
