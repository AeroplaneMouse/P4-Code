//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Grammar/Corona.g4 by ANTLR 4.7.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.2")]
[System.CLSCompliant(false)]
public partial class CoronaParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, ID=34, INT=35, STRING=36, COMMENT=37, WS=38, CR=39, 
		NL=40, CRNL=41, TAB=42;
	public const int
		RULE_main = 0, RULE_grid = 1, RULE_states = 2, RULE_initial = 3, RULE_rules = 4, 
		RULE_memberBlock = 5, RULE_memberDeclaration = 6, RULE_statement = 7, 
		RULE_selectionStatement = 8, RULE_iterationStatement = 9, RULE_assignmentStatement = 10, 
		RULE_compoundStatement = 11, RULE_returnStatement = 12, RULE_caseStatement = 13, 
		RULE_expr = 14, RULE_operator = 15, RULE_memberValue = 16, RULE_arrowValue = 17, 
		RULE_member = 18, RULE_gridPoint = 19;
	public static readonly string[] ruleNames = {
		"main", "grid", "states", "initial", "rules", "memberBlock", "memberDeclaration", 
		"statement", "selectionStatement", "iterationStatement", "assignmentStatement", 
		"compoundStatement", "returnStatement", "caseStatement", "expr", "operator", 
		"memberValue", "arrowValue", "member", "gridPoint"
	};

	private static readonly string[] _LiteralNames = {
		null, "'GRID'", "'STATES'", "','", "'INITIAL'", "'RULES'", "'{'", "'}'", 
		"':'", "';'", "'match'", "'('", "'state'", "')'", "'for'", "'='", "'return'", 
		"'['", "']'", "'+'", "'-'", "'*'", "'/'", "'=='", "'!='", "'<'", "'>'", 
		"'<='", "'>='", "'_'", "'0'", "'->'", "'.'", "'grid['", null, null, null, 
		null, null, "'\r'", "'\n'", "'\r\n'", "'\t'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, "ID", "INT", 
		"STRING", "COMMENT", "WS", "CR", "NL", "CRNL", "TAB"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Corona.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static CoronaParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public CoronaParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public CoronaParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class MainContext : ParserRuleContext {
		public GridContext grid() {
			return GetRuleContext<GridContext>(0);
		}
		public InitialContext initial() {
			return GetRuleContext<InitialContext>(0);
		}
		public RulesContext rules() {
			return GetRuleContext<RulesContext>(0);
		}
		public StatesContext[] states() {
			return GetRuleContexts<StatesContext>();
		}
		public StatesContext states(int i) {
			return GetRuleContext<StatesContext>(i);
		}
		public MainContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_main; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.EnterMain(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.ExitMain(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoronaVisitor<TResult> typedVisitor = visitor as ICoronaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMain(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MainContext main() {
		MainContext _localctx = new MainContext(Context, State);
		EnterRule(_localctx, 0, RULE_main);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 40; grid();
			State = 42;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 41; states();
				}
				}
				State = 44;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==T__1 );
			State = 46; initial();
			State = 47; rules();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GridContext : ParserRuleContext {
		public MemberBlockContext memberBlock() {
			return GetRuleContext<MemberBlockContext>(0);
		}
		public GridContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_grid; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.EnterGrid(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.ExitGrid(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoronaVisitor<TResult> typedVisitor = visitor as ICoronaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGrid(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GridContext grid() {
		GridContext _localctx = new GridContext(Context, State);
		EnterRule(_localctx, 2, RULE_grid);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 49; Match(T__0);
			State = 50; memberBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatesContext : ParserRuleContext {
		public ITerminalNode[] ID() { return GetTokens(CoronaParser.ID); }
		public ITerminalNode ID(int i) {
			return GetToken(CoronaParser.ID, i);
		}
		public MemberBlockContext memberBlock() {
			return GetRuleContext<MemberBlockContext>(0);
		}
		public StatesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_states; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.EnterStates(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.ExitStates(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoronaVisitor<TResult> typedVisitor = visitor as ICoronaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStates(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatesContext states() {
		StatesContext _localctx = new StatesContext(Context, State);
		EnterRule(_localctx, 4, RULE_states);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 52; Match(T__1);
			State = 53; Match(ID);
			State = 58;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__2) {
				{
				{
				State = 54; Match(T__2);
				State = 55; Match(ID);
				}
				}
				State = 60;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 61; memberBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitialContext : ParserRuleContext {
		public CompoundStatementContext compoundStatement() {
			return GetRuleContext<CompoundStatementContext>(0);
		}
		public InitialContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initial; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.EnterInitial(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.ExitInitial(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoronaVisitor<TResult> typedVisitor = visitor as ICoronaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInitial(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InitialContext initial() {
		InitialContext _localctx = new InitialContext(Context, State);
		EnterRule(_localctx, 6, RULE_initial);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 63; Match(T__3);
			State = 64; compoundStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RulesContext : ParserRuleContext {
		public SelectionStatementContext[] selectionStatement() {
			return GetRuleContexts<SelectionStatementContext>();
		}
		public SelectionStatementContext selectionStatement(int i) {
			return GetRuleContext<SelectionStatementContext>(i);
		}
		public RulesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rules; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.EnterRules(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.ExitRules(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoronaVisitor<TResult> typedVisitor = visitor as ICoronaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRules(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RulesContext rules() {
		RulesContext _localctx = new RulesContext(Context, State);
		EnterRule(_localctx, 8, RULE_rules);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 66; Match(T__4);
			State = 67; Match(T__5);
			State = 71;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__9) {
				{
				{
				State = 68; selectionStatement();
				}
				}
				State = 73;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 74; Match(T__6);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberBlockContext : ParserRuleContext {
		public MemberDeclarationContext[] memberDeclaration() {
			return GetRuleContexts<MemberDeclarationContext>();
		}
		public MemberDeclarationContext memberDeclaration(int i) {
			return GetRuleContext<MemberDeclarationContext>(i);
		}
		public MemberBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.EnterMemberBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.ExitMemberBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoronaVisitor<TResult> typedVisitor = visitor as ICoronaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemberBlockContext memberBlock() {
		MemberBlockContext _localctx = new MemberBlockContext(Context, State);
		EnterRule(_localctx, 10, RULE_memberBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 76; Match(T__5);
			State = 78;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 77; memberDeclaration();
				}
				}
				State = 80;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==ID );
			State = 82; Match(T__6);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberDeclarationContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(CoronaParser.ID, 0); }
		public MemberValueContext[] memberValue() {
			return GetRuleContexts<MemberValueContext>();
		}
		public MemberValueContext memberValue(int i) {
			return GetRuleContext<MemberValueContext>(i);
		}
		public MemberDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.EnterMemberDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.ExitMemberDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoronaVisitor<TResult> typedVisitor = visitor as ICoronaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemberDeclarationContext memberDeclaration() {
		MemberDeclarationContext _localctx = new MemberDeclarationContext(Context, State);
		EnterRule(_localctx, 12, RULE_memberDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 84; Match(ID);
			State = 85; Match(T__7);
			State = 86; memberValue();
			State = 91;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__2) {
				{
				{
				State = 87; Match(T__2);
				State = 88; memberValue();
				}
				}
				State = 93;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 94; Match(T__8);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public SelectionStatementContext selectionStatement() {
			return GetRuleContext<SelectionStatementContext>(0);
		}
		public IterationStatementContext iterationStatement() {
			return GetRuleContext<IterationStatementContext>(0);
		}
		public AssignmentStatementContext assignmentStatement() {
			return GetRuleContext<AssignmentStatementContext>(0);
		}
		public CompoundStatementContext compoundStatement() {
			return GetRuleContext<CompoundStatementContext>(0);
		}
		public ReturnStatementContext returnStatement() {
			return GetRuleContext<ReturnStatementContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoronaVisitor<TResult> typedVisitor = visitor as ICoronaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 14, RULE_statement);
		try {
			State = 101;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__9:
				EnterOuterAlt(_localctx, 1);
				{
				State = 96; selectionStatement();
				}
				break;
			case T__13:
				EnterOuterAlt(_localctx, 2);
				{
				State = 97; iterationStatement();
				}
				break;
			case T__32:
			case ID:
				EnterOuterAlt(_localctx, 3);
				{
				State = 98; assignmentStatement();
				}
				break;
			case T__5:
				EnterOuterAlt(_localctx, 4);
				{
				State = 99; compoundStatement();
				}
				break;
			case T__15:
				EnterOuterAlt(_localctx, 5);
				{
				State = 100; returnStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectionStatementContext : ParserRuleContext {
		public MemberContext[] member() {
			return GetRuleContexts<MemberContext>();
		}
		public MemberContext member(int i) {
			return GetRuleContext<MemberContext>(i);
		}
		public CaseStatementContext[] caseStatement() {
			return GetRuleContexts<CaseStatementContext>();
		}
		public CaseStatementContext caseStatement(int i) {
			return GetRuleContext<CaseStatementContext>(i);
		}
		public SelectionStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectionStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.EnterSelectionStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.ExitSelectionStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoronaVisitor<TResult> typedVisitor = visitor as ICoronaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectionStatementContext selectionStatement() {
		SelectionStatementContext _localctx = new SelectionStatementContext(Context, State);
		EnterRule(_localctx, 16, RULE_selectionStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 103; Match(T__9);
			State = 104; Match(T__10);
			State = 107;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__11:
				{
				State = 105; Match(T__11);
				}
				break;
			case T__31:
				{
				State = 106; member();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 113;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__2) {
				{
				{
				State = 109; Match(T__2);
				State = 110; member();
				}
				}
				State = 115;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 116; Match(T__12);
			State = 117; Match(T__5);
			State = 119;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 118; caseStatement();
				}
				}
				State = 121;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==T__16 );
			State = 123; Match(T__6);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IterationStatementContext : ParserRuleContext {
		public ExprContext initializer;
		public ExprContext condition;
		public ExprContext iterator;
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public IterationStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iterationStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.EnterIterationStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.ExitIterationStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoronaVisitor<TResult> typedVisitor = visitor as ICoronaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIterationStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IterationStatementContext iterationStatement() {
		IterationStatementContext _localctx = new IterationStatementContext(Context, State);
		EnterRule(_localctx, 18, RULE_iterationStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 125; Match(T__13);
			State = 126; Match(T__10);
			State = 127; _localctx.initializer = expr(0);
			State = 128; Match(T__8);
			State = 129; _localctx.condition = expr(0);
			State = 130; Match(T__8);
			State = 131; _localctx.iterator = expr(0);
			State = 132; Match(T__12);
			State = 133; statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentStatementContext : ParserRuleContext {
		public GridPointContext gridPoint() {
			return GetRuleContext<GridPointContext>(0);
		}
		public ITerminalNode ID() { return GetToken(CoronaParser.ID, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode STRING() { return GetToken(CoronaParser.STRING, 0); }
		public MemberContext member() {
			return GetRuleContext<MemberContext>(0);
		}
		public AssignmentStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.EnterAssignmentStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.ExitAssignmentStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoronaVisitor<TResult> typedVisitor = visitor as ICoronaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentStatementContext assignmentStatement() {
		AssignmentStatementContext _localctx = new AssignmentStatementContext(Context, State);
		EnterRule(_localctx, 20, RULE_assignmentStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 140;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__32:
				{
				State = 135; gridPoint();
				State = 137;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__31) {
					{
					State = 136; member();
					}
				}

				}
				break;
			case ID:
				{
				State = 139; Match(ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 142; Match(T__14);
			State = 145;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__31:
			case ID:
			case INT:
				{
				State = 143; expr(0);
				}
				break;
			case STRING:
				{
				State = 144; Match(STRING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 147; Match(T__8);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompoundStatementContext : ParserRuleContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public CompoundStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compoundStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.EnterCompoundStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.ExitCompoundStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoronaVisitor<TResult> typedVisitor = visitor as ICoronaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompoundStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompoundStatementContext compoundStatement() {
		CompoundStatementContext _localctx = new CompoundStatementContext(Context, State);
		EnterRule(_localctx, 22, RULE_compoundStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 149; Match(T__5);
			State = 153;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__5) | (1L << T__9) | (1L << T__13) | (1L << T__15) | (1L << T__32) | (1L << ID))) != 0)) {
				{
				{
				State = 150; statement();
				}
				}
				State = 155;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 156; Match(T__6);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStatementContext : ParserRuleContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ReturnStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.EnterReturnStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.ExitReturnStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoronaVisitor<TResult> typedVisitor = visitor as ICoronaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStatementContext returnStatement() {
		ReturnStatementContext _localctx = new ReturnStatementContext(Context, State);
		EnterRule(_localctx, 24, RULE_returnStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 158; Match(T__15);
			State = 159; expr(0);
			State = 160; Match(T__8);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseStatementContext : ParserRuleContext {
		public MemberValueContext[] memberValue() {
			return GetRuleContexts<MemberValueContext>();
		}
		public MemberValueContext memberValue(int i) {
			return GetRuleContext<MemberValueContext>(i);
		}
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public CaseStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.EnterCaseStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.ExitCaseStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoronaVisitor<TResult> typedVisitor = visitor as ICoronaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CaseStatementContext caseStatement() {
		CaseStatementContext _localctx = new CaseStatementContext(Context, State);
		EnterRule(_localctx, 26, RULE_caseStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 162; Match(T__16);
			State = 163; memberValue();
			State = 168;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__2) {
				{
				{
				State = 164; Match(T__2);
				State = 165; memberValue();
				}
				}
				State = 170;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 171; Match(T__17);
			State = 172; statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
	 
		public ExprContext() { }
		public virtual void CopyFrom(ExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NumberExprContext : ExprContext {
		public IToken value;
		public ITerminalNode INT() { return GetToken(CoronaParser.INT, 0); }
		public NumberExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.EnterNumberExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.ExitNumberExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoronaVisitor<TResult> typedVisitor = visitor as ICoronaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumberExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdentifierExprContext : ExprContext {
		public IToken value;
		public ITerminalNode ID() { return GetToken(CoronaParser.ID, 0); }
		public MemberContext member() {
			return GetRuleContext<MemberContext>(0);
		}
		public IdentifierExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.EnterIdentifierExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.ExitIdentifierExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoronaVisitor<TResult> typedVisitor = visitor as ICoronaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class InfixExprContext : ExprContext {
		public ExprContext left;
		public OperatorContext op;
		public ExprContext right;
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public OperatorContext @operator() {
			return GetRuleContext<OperatorContext>(0);
		}
		public InfixExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.EnterInfixExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.ExitInfixExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoronaVisitor<TResult> typedVisitor = visitor as ICoronaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInfixExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(Context, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 28;
		EnterRecursionRule(_localctx, 28, RULE_expr, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 178;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INT:
				{
				_localctx = new NumberExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 175; ((NumberExprContext)_localctx).value = Match(INT);
				}
				break;
			case ID:
				{
				_localctx = new IdentifierExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 176; ((IdentifierExprContext)_localctx).value = Match(ID);
				}
				break;
			case T__31:
				{
				_localctx = new IdentifierExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 177; member();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 186;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new InfixExprContext(new ExprContext(_parentctx, _parentState));
					((InfixExprContext)_localctx).left = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_expr);
					State = 180;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 181; ((InfixExprContext)_localctx).op = @operator();
					State = 182; ((InfixExprContext)_localctx).right = expr(2);
					}
					} 
				}
				State = 188;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class OperatorContext : ParserRuleContext {
		public OperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.EnterOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.ExitOperator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoronaVisitor<TResult> typedVisitor = visitor as ICoronaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorContext @operator() {
		OperatorContext _localctx = new OperatorContext(Context, State);
		EnterRule(_localctx, 30, RULE_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 189;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__18) | (1L << T__19) | (1L << T__20) | (1L << T__21) | (1L << T__22) | (1L << T__23) | (1L << T__24) | (1L << T__25) | (1L << T__26) | (1L << T__27))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberValueContext : ParserRuleContext {
		public MemberValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberValue; } }
	 
		public MemberValueContext() { }
		public virtual void CopyFrom(MemberValueContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class IdentifierMemberValueContext : MemberValueContext {
		public IToken value;
		public ITerminalNode ID() { return GetToken(CoronaParser.ID, 0); }
		public IdentifierMemberValueContext(MemberValueContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.EnterIdentifierMemberValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.ExitIdentifierMemberValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoronaVisitor<TResult> typedVisitor = visitor as ICoronaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierMemberValue(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IntMemberValueContext : MemberValueContext {
		public IToken value;
		public ITerminalNode INT() { return GetToken(CoronaParser.INT, 0); }
		public IntMemberValueContext(MemberValueContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.EnterIntMemberValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.ExitIntMemberValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoronaVisitor<TResult> typedVisitor = visitor as ICoronaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntMemberValue(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StringMemberValueContext : MemberValueContext {
		public IToken value;
		public ITerminalNode STRING() { return GetToken(CoronaParser.STRING, 0); }
		public StringMemberValueContext(MemberValueContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.EnterStringMemberValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.ExitStringMemberValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoronaVisitor<TResult> typedVisitor = visitor as ICoronaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringMemberValue(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ArrowMemberValueContext : MemberValueContext {
		public ArrowValueContext arrowValue() {
			return GetRuleContext<ArrowValueContext>(0);
		}
		public ArrowMemberValueContext(MemberValueContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.EnterArrowMemberValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.ExitArrowMemberValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoronaVisitor<TResult> typedVisitor = visitor as ICoronaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrowMemberValue(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DefaultMemberValueContext : MemberValueContext {
		public DefaultMemberValueContext(MemberValueContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.EnterDefaultMemberValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.ExitDefaultMemberValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoronaVisitor<TResult> typedVisitor = visitor as ICoronaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefaultMemberValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemberValueContext memberValue() {
		MemberValueContext _localctx = new MemberValueContext(Context, State);
		EnterRule(_localctx, 32, RULE_memberValue);
		try {
			State = 196;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__29:
				_localctx = new ArrowMemberValueContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 191; arrowValue();
				}
				break;
			case INT:
				_localctx = new IntMemberValueContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 192; ((IntMemberValueContext)_localctx).value = Match(INT);
				}
				break;
			case STRING:
				_localctx = new StringMemberValueContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 193; ((StringMemberValueContext)_localctx).value = Match(STRING);
				}
				break;
			case ID:
				_localctx = new IdentifierMemberValueContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 194; ((IdentifierMemberValueContext)_localctx).value = Match(ID);
				}
				break;
			case T__28:
				_localctx = new DefaultMemberValueContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 195; Match(T__28);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrowValueContext : ParserRuleContext {
		public ITerminalNode INT() { return GetToken(CoronaParser.INT, 0); }
		public ArrowValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrowValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.EnterArrowValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.ExitArrowValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoronaVisitor<TResult> typedVisitor = visitor as ICoronaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrowValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrowValueContext arrowValue() {
		ArrowValueContext _localctx = new ArrowValueContext(Context, State);
		EnterRule(_localctx, 34, RULE_arrowValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 198; Match(T__29);
			State = 199; Match(T__30);
			State = 200; Match(INT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(CoronaParser.ID, 0); }
		public MemberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_member; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.EnterMember(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.ExitMember(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoronaVisitor<TResult> typedVisitor = visitor as ICoronaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMember(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemberContext member() {
		MemberContext _localctx = new MemberContext(Context, State);
		EnterRule(_localctx, 36, RULE_member);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 202; Match(T__31);
			State = 203; Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GridPointContext : ParserRuleContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public GridPointContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_gridPoint; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.EnterGridPoint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.ExitGridPoint(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoronaVisitor<TResult> typedVisitor = visitor as ICoronaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGridPoint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GridPointContext gridPoint() {
		GridPointContext _localctx = new GridPointContext(Context, State);
		EnterRule(_localctx, 38, RULE_gridPoint);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 205; Match(T__32);
			State = 206; expr(0);
			State = 211;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__2) {
				{
				{
				State = 207; Match(T__2);
				State = 208; expr(0);
				}
				}
				State = 213;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 214; Match(T__17);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 14: return expr_sempred((ExprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 1);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', ',', '\xDB', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x3', 
		'\x2', '\x3', '\x2', '\x6', '\x2', '-', '\n', '\x2', '\r', '\x2', '\xE', 
		'\x2', '.', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\a', '\x4', ';', '\n', '\x4', '\f', '\x4', '\xE', '\x4', '>', 
		'\v', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\a', '\x6', 'H', '\n', 
		'\x6', '\f', '\x6', '\xE', '\x6', 'K', '\v', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\a', '\x3', '\a', '\x6', '\a', 'Q', '\n', '\a', '\r', '\a', 
		'\xE', '\a', 'R', '\x3', '\a', '\x3', '\a', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\a', '\b', '\\', '\n', '\b', '\f', 
		'\b', '\xE', '\b', '_', '\v', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x5', '\t', 'h', 
		'\n', '\t', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x5', 
		'\n', 'n', '\n', '\n', '\x3', '\n', '\x3', '\n', '\a', '\n', 'r', '\n', 
		'\n', '\f', '\n', '\xE', '\n', 'u', '\v', '\n', '\x3', '\n', '\x3', '\n', 
		'\x3', '\n', '\x6', '\n', 'z', '\n', '\n', '\r', '\n', '\xE', '\n', '{', 
		'\x3', '\n', '\x3', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\f', '\x3', '\f', '\x5', '\f', '\x8C', '\n', '\f', 
		'\x3', '\f', '\x5', '\f', '\x8F', '\n', '\f', '\x3', '\f', '\x3', '\f', 
		'\x3', '\f', '\x5', '\f', '\x94', '\n', '\f', '\x3', '\f', '\x3', '\f', 
		'\x3', '\r', '\x3', '\r', '\a', '\r', '\x9A', '\n', '\r', '\f', '\r', 
		'\xE', '\r', '\x9D', '\v', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\xE', 
		'\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xF', '\x3', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\a', '\xF', '\xA9', '\n', '\xF', '\f', '\xF', 
		'\xE', '\xF', '\xAC', '\v', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x5', 
		'\x10', '\xB5', '\n', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\a', '\x10', '\xBB', '\n', '\x10', '\f', '\x10', '\xE', 
		'\x10', '\xBE', '\v', '\x10', '\x3', '\x11', '\x3', '\x11', '\x3', '\x12', 
		'\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x5', '\x12', 
		'\xC7', '\n', '\x12', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', 
		'\x13', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x15', '\x3', 
		'\x15', '\x3', '\x15', '\x3', '\x15', '\a', '\x15', '\xD4', '\n', '\x15', 
		'\f', '\x15', '\xE', '\x15', '\xD7', '\v', '\x15', '\x3', '\x15', '\x3', 
		'\x15', '\x3', '\x15', '\x2', '\x3', '\x1E', '\x16', '\x2', '\x4', '\x6', 
		'\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', 
		'\x1C', '\x1E', ' ', '\"', '$', '&', '(', '\x2', '\x3', '\x3', '\x2', 
		'\x15', '\x1E', '\x2', '\xDF', '\x2', '*', '\x3', '\x2', '\x2', '\x2', 
		'\x4', '\x33', '\x3', '\x2', '\x2', '\x2', '\x6', '\x36', '\x3', '\x2', 
		'\x2', '\x2', '\b', '\x41', '\x3', '\x2', '\x2', '\x2', '\n', '\x44', 
		'\x3', '\x2', '\x2', '\x2', '\f', 'N', '\x3', '\x2', '\x2', '\x2', '\xE', 
		'V', '\x3', '\x2', '\x2', '\x2', '\x10', 'g', '\x3', '\x2', '\x2', '\x2', 
		'\x12', 'i', '\x3', '\x2', '\x2', '\x2', '\x14', '\x7F', '\x3', '\x2', 
		'\x2', '\x2', '\x16', '\x8E', '\x3', '\x2', '\x2', '\x2', '\x18', '\x97', 
		'\x3', '\x2', '\x2', '\x2', '\x1A', '\xA0', '\x3', '\x2', '\x2', '\x2', 
		'\x1C', '\xA4', '\x3', '\x2', '\x2', '\x2', '\x1E', '\xB4', '\x3', '\x2', 
		'\x2', '\x2', ' ', '\xBF', '\x3', '\x2', '\x2', '\x2', '\"', '\xC6', '\x3', 
		'\x2', '\x2', '\x2', '$', '\xC8', '\x3', '\x2', '\x2', '\x2', '&', '\xCC', 
		'\x3', '\x2', '\x2', '\x2', '(', '\xCF', '\x3', '\x2', '\x2', '\x2', '*', 
		',', '\x5', '\x4', '\x3', '\x2', '+', '-', '\x5', '\x6', '\x4', '\x2', 
		',', '+', '\x3', '\x2', '\x2', '\x2', '-', '.', '\x3', '\x2', '\x2', '\x2', 
		'.', ',', '\x3', '\x2', '\x2', '\x2', '.', '/', '\x3', '\x2', '\x2', '\x2', 
		'/', '\x30', '\x3', '\x2', '\x2', '\x2', '\x30', '\x31', '\x5', '\b', 
		'\x5', '\x2', '\x31', '\x32', '\x5', '\n', '\x6', '\x2', '\x32', '\x3', 
		'\x3', '\x2', '\x2', '\x2', '\x33', '\x34', '\a', '\x3', '\x2', '\x2', 
		'\x34', '\x35', '\x5', '\f', '\a', '\x2', '\x35', '\x5', '\x3', '\x2', 
		'\x2', '\x2', '\x36', '\x37', '\a', '\x4', '\x2', '\x2', '\x37', '<', 
		'\a', '$', '\x2', '\x2', '\x38', '\x39', '\a', '\x5', '\x2', '\x2', '\x39', 
		';', '\a', '$', '\x2', '\x2', ':', '\x38', '\x3', '\x2', '\x2', '\x2', 
		';', '>', '\x3', '\x2', '\x2', '\x2', '<', ':', '\x3', '\x2', '\x2', '\x2', 
		'<', '=', '\x3', '\x2', '\x2', '\x2', '=', '?', '\x3', '\x2', '\x2', '\x2', 
		'>', '<', '\x3', '\x2', '\x2', '\x2', '?', '@', '\x5', '\f', '\a', '\x2', 
		'@', '\a', '\x3', '\x2', '\x2', '\x2', '\x41', '\x42', '\a', '\x6', '\x2', 
		'\x2', '\x42', '\x43', '\x5', '\x18', '\r', '\x2', '\x43', '\t', '\x3', 
		'\x2', '\x2', '\x2', '\x44', '\x45', '\a', '\a', '\x2', '\x2', '\x45', 
		'I', '\a', '\b', '\x2', '\x2', '\x46', 'H', '\x5', '\x12', '\n', '\x2', 
		'G', '\x46', '\x3', '\x2', '\x2', '\x2', 'H', 'K', '\x3', '\x2', '\x2', 
		'\x2', 'I', 'G', '\x3', '\x2', '\x2', '\x2', 'I', 'J', '\x3', '\x2', '\x2', 
		'\x2', 'J', 'L', '\x3', '\x2', '\x2', '\x2', 'K', 'I', '\x3', '\x2', '\x2', 
		'\x2', 'L', 'M', '\a', '\t', '\x2', '\x2', 'M', '\v', '\x3', '\x2', '\x2', 
		'\x2', 'N', 'P', '\a', '\b', '\x2', '\x2', 'O', 'Q', '\x5', '\xE', '\b', 
		'\x2', 'P', 'O', '\x3', '\x2', '\x2', '\x2', 'Q', 'R', '\x3', '\x2', '\x2', 
		'\x2', 'R', 'P', '\x3', '\x2', '\x2', '\x2', 'R', 'S', '\x3', '\x2', '\x2', 
		'\x2', 'S', 'T', '\x3', '\x2', '\x2', '\x2', 'T', 'U', '\a', '\t', '\x2', 
		'\x2', 'U', '\r', '\x3', '\x2', '\x2', '\x2', 'V', 'W', '\a', '$', '\x2', 
		'\x2', 'W', 'X', '\a', '\n', '\x2', '\x2', 'X', ']', '\x5', '\"', '\x12', 
		'\x2', 'Y', 'Z', '\a', '\x5', '\x2', '\x2', 'Z', '\\', '\x5', '\"', '\x12', 
		'\x2', '[', 'Y', '\x3', '\x2', '\x2', '\x2', '\\', '_', '\x3', '\x2', 
		'\x2', '\x2', ']', '[', '\x3', '\x2', '\x2', '\x2', ']', '^', '\x3', '\x2', 
		'\x2', '\x2', '^', '`', '\x3', '\x2', '\x2', '\x2', '_', ']', '\x3', '\x2', 
		'\x2', '\x2', '`', '\x61', '\a', '\v', '\x2', '\x2', '\x61', '\xF', '\x3', 
		'\x2', '\x2', '\x2', '\x62', 'h', '\x5', '\x12', '\n', '\x2', '\x63', 
		'h', '\x5', '\x14', '\v', '\x2', '\x64', 'h', '\x5', '\x16', '\f', '\x2', 
		'\x65', 'h', '\x5', '\x18', '\r', '\x2', '\x66', 'h', '\x5', '\x1A', '\xE', 
		'\x2', 'g', '\x62', '\x3', '\x2', '\x2', '\x2', 'g', '\x63', '\x3', '\x2', 
		'\x2', '\x2', 'g', '\x64', '\x3', '\x2', '\x2', '\x2', 'g', '\x65', '\x3', 
		'\x2', '\x2', '\x2', 'g', '\x66', '\x3', '\x2', '\x2', '\x2', 'h', '\x11', 
		'\x3', '\x2', '\x2', '\x2', 'i', 'j', '\a', '\f', '\x2', '\x2', 'j', 'm', 
		'\a', '\r', '\x2', '\x2', 'k', 'n', '\a', '\xE', '\x2', '\x2', 'l', 'n', 
		'\x5', '&', '\x14', '\x2', 'm', 'k', '\x3', '\x2', '\x2', '\x2', 'm', 
		'l', '\x3', '\x2', '\x2', '\x2', 'n', 's', '\x3', '\x2', '\x2', '\x2', 
		'o', 'p', '\a', '\x5', '\x2', '\x2', 'p', 'r', '\x5', '&', '\x14', '\x2', 
		'q', 'o', '\x3', '\x2', '\x2', '\x2', 'r', 'u', '\x3', '\x2', '\x2', '\x2', 
		's', 'q', '\x3', '\x2', '\x2', '\x2', 's', 't', '\x3', '\x2', '\x2', '\x2', 
		't', 'v', '\x3', '\x2', '\x2', '\x2', 'u', 's', '\x3', '\x2', '\x2', '\x2', 
		'v', 'w', '\a', '\xF', '\x2', '\x2', 'w', 'y', '\a', '\b', '\x2', '\x2', 
		'x', 'z', '\x5', '\x1C', '\xF', '\x2', 'y', 'x', '\x3', '\x2', '\x2', 
		'\x2', 'z', '{', '\x3', '\x2', '\x2', '\x2', '{', 'y', '\x3', '\x2', '\x2', 
		'\x2', '{', '|', '\x3', '\x2', '\x2', '\x2', '|', '}', '\x3', '\x2', '\x2', 
		'\x2', '}', '~', '\a', '\t', '\x2', '\x2', '~', '\x13', '\x3', '\x2', 
		'\x2', '\x2', '\x7F', '\x80', '\a', '\x10', '\x2', '\x2', '\x80', '\x81', 
		'\a', '\r', '\x2', '\x2', '\x81', '\x82', '\x5', '\x1E', '\x10', '\x2', 
		'\x82', '\x83', '\a', '\v', '\x2', '\x2', '\x83', '\x84', '\x5', '\x1E', 
		'\x10', '\x2', '\x84', '\x85', '\a', '\v', '\x2', '\x2', '\x85', '\x86', 
		'\x5', '\x1E', '\x10', '\x2', '\x86', '\x87', '\a', '\xF', '\x2', '\x2', 
		'\x87', '\x88', '\x5', '\x10', '\t', '\x2', '\x88', '\x15', '\x3', '\x2', 
		'\x2', '\x2', '\x89', '\x8B', '\x5', '(', '\x15', '\x2', '\x8A', '\x8C', 
		'\x5', '&', '\x14', '\x2', '\x8B', '\x8A', '\x3', '\x2', '\x2', '\x2', 
		'\x8B', '\x8C', '\x3', '\x2', '\x2', '\x2', '\x8C', '\x8F', '\x3', '\x2', 
		'\x2', '\x2', '\x8D', '\x8F', '\a', '$', '\x2', '\x2', '\x8E', '\x89', 
		'\x3', '\x2', '\x2', '\x2', '\x8E', '\x8D', '\x3', '\x2', '\x2', '\x2', 
		'\x8F', '\x90', '\x3', '\x2', '\x2', '\x2', '\x90', '\x93', '\a', '\x11', 
		'\x2', '\x2', '\x91', '\x94', '\x5', '\x1E', '\x10', '\x2', '\x92', '\x94', 
		'\a', '&', '\x2', '\x2', '\x93', '\x91', '\x3', '\x2', '\x2', '\x2', '\x93', 
		'\x92', '\x3', '\x2', '\x2', '\x2', '\x94', '\x95', '\x3', '\x2', '\x2', 
		'\x2', '\x95', '\x96', '\a', '\v', '\x2', '\x2', '\x96', '\x17', '\x3', 
		'\x2', '\x2', '\x2', '\x97', '\x9B', '\a', '\b', '\x2', '\x2', '\x98', 
		'\x9A', '\x5', '\x10', '\t', '\x2', '\x99', '\x98', '\x3', '\x2', '\x2', 
		'\x2', '\x9A', '\x9D', '\x3', '\x2', '\x2', '\x2', '\x9B', '\x99', '\x3', 
		'\x2', '\x2', '\x2', '\x9B', '\x9C', '\x3', '\x2', '\x2', '\x2', '\x9C', 
		'\x9E', '\x3', '\x2', '\x2', '\x2', '\x9D', '\x9B', '\x3', '\x2', '\x2', 
		'\x2', '\x9E', '\x9F', '\a', '\t', '\x2', '\x2', '\x9F', '\x19', '\x3', 
		'\x2', '\x2', '\x2', '\xA0', '\xA1', '\a', '\x12', '\x2', '\x2', '\xA1', 
		'\xA2', '\x5', '\x1E', '\x10', '\x2', '\xA2', '\xA3', '\a', '\v', '\x2', 
		'\x2', '\xA3', '\x1B', '\x3', '\x2', '\x2', '\x2', '\xA4', '\xA5', '\a', 
		'\x13', '\x2', '\x2', '\xA5', '\xAA', '\x5', '\"', '\x12', '\x2', '\xA6', 
		'\xA7', '\a', '\x5', '\x2', '\x2', '\xA7', '\xA9', '\x5', '\"', '\x12', 
		'\x2', '\xA8', '\xA6', '\x3', '\x2', '\x2', '\x2', '\xA9', '\xAC', '\x3', 
		'\x2', '\x2', '\x2', '\xAA', '\xA8', '\x3', '\x2', '\x2', '\x2', '\xAA', 
		'\xAB', '\x3', '\x2', '\x2', '\x2', '\xAB', '\xAD', '\x3', '\x2', '\x2', 
		'\x2', '\xAC', '\xAA', '\x3', '\x2', '\x2', '\x2', '\xAD', '\xAE', '\a', 
		'\x14', '\x2', '\x2', '\xAE', '\xAF', '\x5', '\x10', '\t', '\x2', '\xAF', 
		'\x1D', '\x3', '\x2', '\x2', '\x2', '\xB0', '\xB1', '\b', '\x10', '\x1', 
		'\x2', '\xB1', '\xB5', '\a', '%', '\x2', '\x2', '\xB2', '\xB5', '\a', 
		'$', '\x2', '\x2', '\xB3', '\xB5', '\x5', '&', '\x14', '\x2', '\xB4', 
		'\xB0', '\x3', '\x2', '\x2', '\x2', '\xB4', '\xB2', '\x3', '\x2', '\x2', 
		'\x2', '\xB4', '\xB3', '\x3', '\x2', '\x2', '\x2', '\xB5', '\xBC', '\x3', 
		'\x2', '\x2', '\x2', '\xB6', '\xB7', '\f', '\x3', '\x2', '\x2', '\xB7', 
		'\xB8', '\x5', ' ', '\x11', '\x2', '\xB8', '\xB9', '\x5', '\x1E', '\x10', 
		'\x4', '\xB9', '\xBB', '\x3', '\x2', '\x2', '\x2', '\xBA', '\xB6', '\x3', 
		'\x2', '\x2', '\x2', '\xBB', '\xBE', '\x3', '\x2', '\x2', '\x2', '\xBC', 
		'\xBA', '\x3', '\x2', '\x2', '\x2', '\xBC', '\xBD', '\x3', '\x2', '\x2', 
		'\x2', '\xBD', '\x1F', '\x3', '\x2', '\x2', '\x2', '\xBE', '\xBC', '\x3', 
		'\x2', '\x2', '\x2', '\xBF', '\xC0', '\t', '\x2', '\x2', '\x2', '\xC0', 
		'!', '\x3', '\x2', '\x2', '\x2', '\xC1', '\xC7', '\x5', '$', '\x13', '\x2', 
		'\xC2', '\xC7', '\a', '%', '\x2', '\x2', '\xC3', '\xC7', '\a', '&', '\x2', 
		'\x2', '\xC4', '\xC7', '\a', '$', '\x2', '\x2', '\xC5', '\xC7', '\a', 
		'\x1F', '\x2', '\x2', '\xC6', '\xC1', '\x3', '\x2', '\x2', '\x2', '\xC6', 
		'\xC2', '\x3', '\x2', '\x2', '\x2', '\xC6', '\xC3', '\x3', '\x2', '\x2', 
		'\x2', '\xC6', '\xC4', '\x3', '\x2', '\x2', '\x2', '\xC6', '\xC5', '\x3', 
		'\x2', '\x2', '\x2', '\xC7', '#', '\x3', '\x2', '\x2', '\x2', '\xC8', 
		'\xC9', '\a', ' ', '\x2', '\x2', '\xC9', '\xCA', '\a', '!', '\x2', '\x2', 
		'\xCA', '\xCB', '\a', '%', '\x2', '\x2', '\xCB', '%', '\x3', '\x2', '\x2', 
		'\x2', '\xCC', '\xCD', '\a', '\"', '\x2', '\x2', '\xCD', '\xCE', '\a', 
		'$', '\x2', '\x2', '\xCE', '\'', '\x3', '\x2', '\x2', '\x2', '\xCF', '\xD0', 
		'\a', '#', '\x2', '\x2', '\xD0', '\xD5', '\x5', '\x1E', '\x10', '\x2', 
		'\xD1', '\xD2', '\a', '\x5', '\x2', '\x2', '\xD2', '\xD4', '\x5', '\x1E', 
		'\x10', '\x2', '\xD3', '\xD1', '\x3', '\x2', '\x2', '\x2', '\xD4', '\xD7', 
		'\x3', '\x2', '\x2', '\x2', '\xD5', '\xD3', '\x3', '\x2', '\x2', '\x2', 
		'\xD5', '\xD6', '\x3', '\x2', '\x2', '\x2', '\xD6', '\xD8', '\x3', '\x2', 
		'\x2', '\x2', '\xD7', '\xD5', '\x3', '\x2', '\x2', '\x2', '\xD8', '\xD9', 
		'\a', '\x14', '\x2', '\x2', '\xD9', ')', '\x3', '\x2', '\x2', '\x2', '\x14', 
		'.', '<', 'I', 'R', ']', 'g', 'm', 's', '{', '\x8B', '\x8E', '\x93', '\x9B', 
		'\xAA', '\xB4', '\xBC', '\xC6', '\xD5',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
