//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Grammar/Corona.g4 by ANTLR 4.7.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.2")]
[System.CLSCompliant(false)]
public partial class CoronaParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, ID=34, INT=35, STRING=36, COMMENT=37, WS=38, CR=39, 
		NL=40, CRNL=41, TAB=42;
	public const int
		RULE_main = 0, RULE_grid = 1, RULE_states = 2, RULE_initial = 3, RULE_rules = 4, 
		RULE_memberBlock = 5, RULE_memberDeclaration = 6, RULE_statement = 7, 
		RULE_selectionStatement = 8, RULE_iterationStatement = 9, RULE_assignmentStatement = 10, 
		RULE_compoundStatement = 11, RULE_returnStatement = 12, RULE_caseStatement = 13, 
		RULE_expr = 14, RULE_mathExpr = 15, RULE_operator = 16, RULE_compareOperator = 17, 
		RULE_memberValue = 18, RULE_arrowValue = 19, RULE_member = 20, RULE_gridPoint = 21;
	public static readonly string[] ruleNames = {
		"main", "grid", "states", "initial", "rules", "memberBlock", "memberDeclaration", 
		"statement", "selectionStatement", "iterationStatement", "assignmentStatement", 
		"compoundStatement", "returnStatement", "caseStatement", "expr", "mathExpr", 
		"operator", "compareOperator", "memberValue", "arrowValue", "member", 
		"gridPoint"
	};

	private static readonly string[] _LiteralNames = {
		null, "'GRID'", "'{'", "'}'", "'STATES'", "','", "'INITIAL'", "'RULES'", 
		"':'", "';'", "'match'", "'('", "'state'", "')'", "'for'", "'='", "'return'", 
		"'['", "']'", "'+'", "'-'", "'*'", "'/'", "'=='", "'!='", "'<'", "'>'", 
		"'<='", "'>='", "'_'", "'0'", "'->'", "'.'", "'grid['", null, null, null, 
		null, null, "'\r'", "'\n'", "'\r\n'", "'\t'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, "ID", "INT", 
		"STRING", "COMMENT", "WS", "CR", "NL", "CRNL", "TAB"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Corona.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static CoronaParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public CoronaParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public CoronaParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class MainContext : ParserRuleContext {
		public GridContext grid() {
			return GetRuleContext<GridContext>(0);
		}
		public InitialContext initial() {
			return GetRuleContext<InitialContext>(0);
		}
		public RulesContext rules() {
			return GetRuleContext<RulesContext>(0);
		}
		public StatesContext[] states() {
			return GetRuleContexts<StatesContext>();
		}
		public StatesContext states(int i) {
			return GetRuleContext<StatesContext>(i);
		}
		public MainContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_main; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.EnterMain(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.ExitMain(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoronaVisitor<TResult> typedVisitor = visitor as ICoronaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMain(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MainContext main() {
		MainContext _localctx = new MainContext(Context, State);
		EnterRule(_localctx, 0, RULE_main);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 44; grid();
			State = 46;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 45; states();
				}
				}
				State = 48;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==T__3 );
			State = 50; initial();
			State = 51; rules();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GridContext : ParserRuleContext {
		public MemberDeclarationContext[] memberDeclaration() {
			return GetRuleContexts<MemberDeclarationContext>();
		}
		public MemberDeclarationContext memberDeclaration(int i) {
			return GetRuleContext<MemberDeclarationContext>(i);
		}
		public GridContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_grid; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.EnterGrid(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.ExitGrid(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoronaVisitor<TResult> typedVisitor = visitor as ICoronaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGrid(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GridContext grid() {
		GridContext _localctx = new GridContext(Context, State);
		EnterRule(_localctx, 2, RULE_grid);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 53; Match(T__0);
			State = 54; Match(T__1);
			State = 56;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 55; memberDeclaration();
				}
				}
				State = 58;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==ID );
			State = 60; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatesContext : ParserRuleContext {
		public ITerminalNode[] ID() { return GetTokens(CoronaParser.ID); }
		public ITerminalNode ID(int i) {
			return GetToken(CoronaParser.ID, i);
		}
		public MemberBlockContext memberBlock() {
			return GetRuleContext<MemberBlockContext>(0);
		}
		public StatesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_states; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.EnterStates(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.ExitStates(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoronaVisitor<TResult> typedVisitor = visitor as ICoronaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStates(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatesContext states() {
		StatesContext _localctx = new StatesContext(Context, State);
		EnterRule(_localctx, 4, RULE_states);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 62; Match(T__3);
			State = 63; Match(ID);
			State = 68;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__4) {
				{
				{
				State = 64; Match(T__4);
				State = 65; Match(ID);
				}
				}
				State = 70;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 71; memberBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitialContext : ParserRuleContext {
		public CompoundStatementContext compoundStatement() {
			return GetRuleContext<CompoundStatementContext>(0);
		}
		public InitialContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initial; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.EnterInitial(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.ExitInitial(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoronaVisitor<TResult> typedVisitor = visitor as ICoronaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInitial(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InitialContext initial() {
		InitialContext _localctx = new InitialContext(Context, State);
		EnterRule(_localctx, 6, RULE_initial);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 73; Match(T__5);
			State = 74; compoundStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RulesContext : ParserRuleContext {
		public SelectionStatementContext[] selectionStatement() {
			return GetRuleContexts<SelectionStatementContext>();
		}
		public SelectionStatementContext selectionStatement(int i) {
			return GetRuleContext<SelectionStatementContext>(i);
		}
		public RulesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rules; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.EnterRules(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.ExitRules(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoronaVisitor<TResult> typedVisitor = visitor as ICoronaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRules(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RulesContext rules() {
		RulesContext _localctx = new RulesContext(Context, State);
		EnterRule(_localctx, 8, RULE_rules);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 76; Match(T__6);
			State = 77; Match(T__1);
			State = 81;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__9) {
				{
				{
				State = 78; selectionStatement();
				}
				}
				State = 83;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 84; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberBlockContext : ParserRuleContext {
		public MemberDeclarationContext[] memberDeclaration() {
			return GetRuleContexts<MemberDeclarationContext>();
		}
		public MemberDeclarationContext memberDeclaration(int i) {
			return GetRuleContext<MemberDeclarationContext>(i);
		}
		public MemberBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.EnterMemberBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.ExitMemberBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoronaVisitor<TResult> typedVisitor = visitor as ICoronaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemberBlockContext memberBlock() {
		MemberBlockContext _localctx = new MemberBlockContext(Context, State);
		EnterRule(_localctx, 10, RULE_memberBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 86; Match(T__1);
			State = 90;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ID) {
				{
				{
				State = 87; memberDeclaration();
				}
				}
				State = 92;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 93; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberDeclarationContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(CoronaParser.ID, 0); }
		public MemberValueContext[] memberValue() {
			return GetRuleContexts<MemberValueContext>();
		}
		public MemberValueContext memberValue(int i) {
			return GetRuleContext<MemberValueContext>(i);
		}
		public MemberDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.EnterMemberDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.ExitMemberDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoronaVisitor<TResult> typedVisitor = visitor as ICoronaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemberDeclarationContext memberDeclaration() {
		MemberDeclarationContext _localctx = new MemberDeclarationContext(Context, State);
		EnterRule(_localctx, 12, RULE_memberDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 95; Match(ID);
			State = 96; Match(T__7);
			State = 97; memberValue();
			State = 102;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__4) {
				{
				{
				State = 98; Match(T__4);
				State = 99; memberValue();
				}
				}
				State = 104;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 105; Match(T__8);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public SelectionStatementContext selectionStatement() {
			return GetRuleContext<SelectionStatementContext>(0);
		}
		public IterationStatementContext iterationStatement() {
			return GetRuleContext<IterationStatementContext>(0);
		}
		public AssignmentStatementContext assignmentStatement() {
			return GetRuleContext<AssignmentStatementContext>(0);
		}
		public CompoundStatementContext compoundStatement() {
			return GetRuleContext<CompoundStatementContext>(0);
		}
		public ReturnStatementContext returnStatement() {
			return GetRuleContext<ReturnStatementContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoronaVisitor<TResult> typedVisitor = visitor as ICoronaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 14, RULE_statement);
		try {
			State = 112;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__9:
				EnterOuterAlt(_localctx, 1);
				{
				State = 107; selectionStatement();
				}
				break;
			case T__13:
				EnterOuterAlt(_localctx, 2);
				{
				State = 108; iterationStatement();
				}
				break;
			case T__32:
			case ID:
				EnterOuterAlt(_localctx, 3);
				{
				State = 109; assignmentStatement();
				}
				break;
			case T__1:
				EnterOuterAlt(_localctx, 4);
				{
				State = 110; compoundStatement();
				}
				break;
			case T__15:
				EnterOuterAlt(_localctx, 5);
				{
				State = 111; returnStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectionStatementContext : ParserRuleContext {
		public MemberContext[] member() {
			return GetRuleContexts<MemberContext>();
		}
		public MemberContext member(int i) {
			return GetRuleContext<MemberContext>(i);
		}
		public CaseStatementContext[] caseStatement() {
			return GetRuleContexts<CaseStatementContext>();
		}
		public CaseStatementContext caseStatement(int i) {
			return GetRuleContext<CaseStatementContext>(i);
		}
		public SelectionStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectionStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.EnterSelectionStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.ExitSelectionStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoronaVisitor<TResult> typedVisitor = visitor as ICoronaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectionStatementContext selectionStatement() {
		SelectionStatementContext _localctx = new SelectionStatementContext(Context, State);
		EnterRule(_localctx, 16, RULE_selectionStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 114; Match(T__9);
			State = 115; Match(T__10);
			State = 118;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__11:
				{
				State = 116; Match(T__11);
				}
				break;
			case T__31:
				{
				State = 117; member();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 124;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__4) {
				{
				{
				State = 120; Match(T__4);
				State = 121; member();
				}
				}
				State = 126;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 127; Match(T__12);
			State = 128; Match(T__1);
			State = 130;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 129; caseStatement();
				}
				}
				State = 132;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==T__16 );
			State = 134; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IterationStatementContext : ParserRuleContext {
		public ExprContext initializer;
		public ExprContext condition;
		public ExprContext iterator;
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public IterationStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iterationStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.EnterIterationStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.ExitIterationStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoronaVisitor<TResult> typedVisitor = visitor as ICoronaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIterationStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IterationStatementContext iterationStatement() {
		IterationStatementContext _localctx = new IterationStatementContext(Context, State);
		EnterRule(_localctx, 18, RULE_iterationStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 136; Match(T__13);
			State = 137; Match(T__10);
			State = 138; _localctx.initializer = expr(0);
			State = 139; Match(T__8);
			State = 140; _localctx.condition = expr(0);
			State = 141; Match(T__8);
			State = 142; _localctx.iterator = expr(0);
			State = 143; Match(T__12);
			State = 144; statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentStatementContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(CoronaParser.ID, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode STRING() { return GetToken(CoronaParser.STRING, 0); }
		public GridPointContext gridPoint() {
			return GetRuleContext<GridPointContext>(0);
		}
		public MemberContext member() {
			return GetRuleContext<MemberContext>(0);
		}
		public AssignmentStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.EnterAssignmentStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.ExitAssignmentStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoronaVisitor<TResult> typedVisitor = visitor as ICoronaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentStatementContext assignmentStatement() {
		AssignmentStatementContext _localctx = new AssignmentStatementContext(Context, State);
		EnterRule(_localctx, 20, RULE_assignmentStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 151;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__32:
				{
				{
				State = 146; gridPoint();
				State = 148;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__31) {
					{
					State = 147; member();
					}
				}

				}
				}
				break;
			case ID:
				{
				State = 150; Match(ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 153; Match(T__14);
			State = 156;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__31:
			case ID:
				{
				State = 154; expr(0);
				}
				break;
			case STRING:
				{
				State = 155; Match(STRING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 158; Match(T__8);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompoundStatementContext : ParserRuleContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public CompoundStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compoundStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.EnterCompoundStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.ExitCompoundStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoronaVisitor<TResult> typedVisitor = visitor as ICoronaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompoundStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompoundStatementContext compoundStatement() {
		CompoundStatementContext _localctx = new CompoundStatementContext(Context, State);
		EnterRule(_localctx, 22, RULE_compoundStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 160; Match(T__1);
			State = 164;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__1) | (1L << T__9) | (1L << T__13) | (1L << T__15) | (1L << T__32) | (1L << ID))) != 0)) {
				{
				{
				State = 161; statement();
				}
				}
				State = 166;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 167; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStatementContext : ParserRuleContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ReturnStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.EnterReturnStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.ExitReturnStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoronaVisitor<TResult> typedVisitor = visitor as ICoronaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStatementContext returnStatement() {
		ReturnStatementContext _localctx = new ReturnStatementContext(Context, State);
		EnterRule(_localctx, 24, RULE_returnStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 169; Match(T__15);
			State = 170; expr(0);
			State = 171; Match(T__8);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseStatementContext : ParserRuleContext {
		public MemberValueContext[] memberValue() {
			return GetRuleContexts<MemberValueContext>();
		}
		public MemberValueContext memberValue(int i) {
			return GetRuleContext<MemberValueContext>(i);
		}
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public CaseStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.EnterCaseStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.ExitCaseStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoronaVisitor<TResult> typedVisitor = visitor as ICoronaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CaseStatementContext caseStatement() {
		CaseStatementContext _localctx = new CaseStatementContext(Context, State);
		EnterRule(_localctx, 26, RULE_caseStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 173; Match(T__16);
			State = 174; memberValue();
			State = 179;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__4) {
				{
				{
				State = 175; Match(T__4);
				State = 176; memberValue();
				}
				}
				State = 181;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 182; Match(T__17);
			State = 183; statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
	 
		public ExprContext() { }
		public virtual void CopyFrom(ExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CompareExprContext : ExprContext {
		public ExprContext left;
		public CompareOperatorContext op;
		public ExprContext right;
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public CompareOperatorContext compareOperator() {
			return GetRuleContext<CompareOperatorContext>(0);
		}
		public CompareExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.EnterCompareExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.ExitCompareExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoronaVisitor<TResult> typedVisitor = visitor as ICoronaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompareExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdentifierExprContext : ExprContext {
		public IToken value;
		public ITerminalNode ID() { return GetToken(CoronaParser.ID, 0); }
		public MemberContext member() {
			return GetRuleContext<MemberContext>(0);
		}
		public IdentifierExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.EnterIdentifierExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.ExitIdentifierExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoronaVisitor<TResult> typedVisitor = visitor as ICoronaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(Context, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 28;
		EnterRecursionRule(_localctx, 28, RULE_expr, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 188;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ID:
				{
				_localctx = new IdentifierExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 186; ((IdentifierExprContext)_localctx).value = Match(ID);
				}
				break;
			case T__31:
				{
				_localctx = new IdentifierExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 187; member();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 196;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new CompareExprContext(new ExprContext(_parentctx, _parentState));
					((CompareExprContext)_localctx).left = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_expr);
					State = 190;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 191; ((CompareExprContext)_localctx).op = compareOperator();
					State = 192; ((CompareExprContext)_localctx).right = expr(2);
					}
					} 
				}
				State = 198;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class MathExprContext : ParserRuleContext {
		public MathExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mathExpr; } }
	 
		public MathExprContext() { }
		public virtual void CopyFrom(MathExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NumberExprContext : MathExprContext {
		public IToken value;
		public ITerminalNode INT() { return GetToken(CoronaParser.INT, 0); }
		public NumberExprContext(MathExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.EnterNumberExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.ExitNumberExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoronaVisitor<TResult> typedVisitor = visitor as ICoronaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumberExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class InfixExprContext : MathExprContext {
		public ExprContext left;
		public OperatorContext op;
		public ExprContext right;
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public OperatorContext @operator() {
			return GetRuleContext<OperatorContext>(0);
		}
		public InfixExprContext(MathExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.EnterInfixExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.ExitInfixExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoronaVisitor<TResult> typedVisitor = visitor as ICoronaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInfixExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MathExprContext mathExpr() {
		MathExprContext _localctx = new MathExprContext(Context, State);
		EnterRule(_localctx, 30, RULE_mathExpr);
		try {
			State = 204;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INT:
				_localctx = new NumberExprContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 199; ((NumberExprContext)_localctx).value = Match(INT);
				}
				break;
			case T__31:
			case ID:
				_localctx = new InfixExprContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 200; ((InfixExprContext)_localctx).left = expr(0);
				State = 201; ((InfixExprContext)_localctx).op = @operator();
				State = 202; ((InfixExprContext)_localctx).right = expr(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorContext : ParserRuleContext {
		public OperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.EnterOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.ExitOperator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoronaVisitor<TResult> typedVisitor = visitor as ICoronaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorContext @operator() {
		OperatorContext _localctx = new OperatorContext(Context, State);
		EnterRule(_localctx, 32, RULE_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 206;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__18) | (1L << T__19) | (1L << T__20) | (1L << T__21))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompareOperatorContext : ParserRuleContext {
		public CompareOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compareOperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.EnterCompareOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.ExitCompareOperator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoronaVisitor<TResult> typedVisitor = visitor as ICoronaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompareOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompareOperatorContext compareOperator() {
		CompareOperatorContext _localctx = new CompareOperatorContext(Context, State);
		EnterRule(_localctx, 34, RULE_compareOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 208;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__22) | (1L << T__23) | (1L << T__24) | (1L << T__25) | (1L << T__26) | (1L << T__27))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberValueContext : ParserRuleContext {
		public MemberValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberValue; } }
	 
		public MemberValueContext() { }
		public virtual void CopyFrom(MemberValueContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class IdentifierMemberValueContext : MemberValueContext {
		public IToken value;
		public ITerminalNode ID() { return GetToken(CoronaParser.ID, 0); }
		public IdentifierMemberValueContext(MemberValueContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.EnterIdentifierMemberValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.ExitIdentifierMemberValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoronaVisitor<TResult> typedVisitor = visitor as ICoronaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierMemberValue(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IntMemberValueContext : MemberValueContext {
		public IToken value;
		public ITerminalNode INT() { return GetToken(CoronaParser.INT, 0); }
		public IntMemberValueContext(MemberValueContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.EnterIntMemberValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.ExitIntMemberValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoronaVisitor<TResult> typedVisitor = visitor as ICoronaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntMemberValue(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StringMemberValueContext : MemberValueContext {
		public IToken value;
		public ITerminalNode STRING() { return GetToken(CoronaParser.STRING, 0); }
		public StringMemberValueContext(MemberValueContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.EnterStringMemberValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.ExitStringMemberValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoronaVisitor<TResult> typedVisitor = visitor as ICoronaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringMemberValue(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ArrowMemberValueContext : MemberValueContext {
		public ArrowValueContext arrowValue() {
			return GetRuleContext<ArrowValueContext>(0);
		}
		public ArrowMemberValueContext(MemberValueContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.EnterArrowMemberValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.ExitArrowMemberValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoronaVisitor<TResult> typedVisitor = visitor as ICoronaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrowMemberValue(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DefaultMemberValueContext : MemberValueContext {
		public DefaultMemberValueContext(MemberValueContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.EnterDefaultMemberValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.ExitDefaultMemberValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoronaVisitor<TResult> typedVisitor = visitor as ICoronaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefaultMemberValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemberValueContext memberValue() {
		MemberValueContext _localctx = new MemberValueContext(Context, State);
		EnterRule(_localctx, 36, RULE_memberValue);
		try {
			State = 215;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__29:
				_localctx = new ArrowMemberValueContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 210; arrowValue();
				}
				break;
			case INT:
				_localctx = new IntMemberValueContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 211; ((IntMemberValueContext)_localctx).value = Match(INT);
				}
				break;
			case STRING:
				_localctx = new StringMemberValueContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 212; ((StringMemberValueContext)_localctx).value = Match(STRING);
				}
				break;
			case ID:
				_localctx = new IdentifierMemberValueContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 213; ((IdentifierMemberValueContext)_localctx).value = Match(ID);
				}
				break;
			case T__28:
				_localctx = new DefaultMemberValueContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 214; Match(T__28);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrowValueContext : ParserRuleContext {
		public ITerminalNode INT() { return GetToken(CoronaParser.INT, 0); }
		public ArrowValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrowValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.EnterArrowValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.ExitArrowValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoronaVisitor<TResult> typedVisitor = visitor as ICoronaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrowValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrowValueContext arrowValue() {
		ArrowValueContext _localctx = new ArrowValueContext(Context, State);
		EnterRule(_localctx, 38, RULE_arrowValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 217; Match(T__29);
			State = 218; Match(T__30);
			State = 219; Match(INT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(CoronaParser.ID, 0); }
		public MemberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_member; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.EnterMember(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.ExitMember(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoronaVisitor<TResult> typedVisitor = visitor as ICoronaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMember(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemberContext member() {
		MemberContext _localctx = new MemberContext(Context, State);
		EnterRule(_localctx, 40, RULE_member);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 221; Match(T__31);
			State = 222; Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GridPointContext : ParserRuleContext {
		public MathExprContext[] mathExpr() {
			return GetRuleContexts<MathExprContext>();
		}
		public MathExprContext mathExpr(int i) {
			return GetRuleContext<MathExprContext>(i);
		}
		public GridPointContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_gridPoint; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.EnterGridPoint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICoronaListener typedListener = listener as ICoronaListener;
			if (typedListener != null) typedListener.ExitGridPoint(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoronaVisitor<TResult> typedVisitor = visitor as ICoronaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGridPoint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GridPointContext gridPoint() {
		GridPointContext _localctx = new GridPointContext(Context, State);
		EnterRule(_localctx, 42, RULE_gridPoint);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 224; Match(T__32);
			State = 225; mathExpr();
			State = 230;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__4) {
				{
				{
				State = 226; Match(T__4);
				State = 227; mathExpr();
				}
				}
				State = 232;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 233; Match(T__17);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 14: return expr_sempred((ExprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 1);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', ',', '\xEE', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x3', '\x2', '\x3', 
		'\x2', '\x6', '\x2', '\x31', '\n', '\x2', '\r', '\x2', '\xE', '\x2', '\x32', 
		'\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x6', '\x3', ';', '\n', '\x3', '\r', '\x3', '\xE', '\x3', 
		'<', '\x3', '\x3', '\x3', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\a', '\x4', '\x45', '\n', '\x4', '\f', '\x4', '\xE', '\x4', 
		'H', '\v', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\a', '\x6', 'R', 
		'\n', '\x6', '\f', '\x6', '\xE', '\x6', 'U', '\v', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\a', '\x3', '\a', '\a', '\a', '[', '\n', '\a', '\f', 
		'\a', '\xE', '\a', '^', '\v', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\a', '\b', 'g', '\n', 
		'\b', '\f', '\b', '\xE', '\b', 'j', '\v', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x5', 
		'\t', 's', '\n', '\t', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', 
		'\x5', '\n', 'y', '\n', '\n', '\x3', '\n', '\x3', '\n', '\a', '\n', '}', 
		'\n', '\n', '\f', '\n', '\xE', '\n', '\x80', '\v', '\n', '\x3', '\n', 
		'\x3', '\n', '\x3', '\n', '\x6', '\n', '\x85', '\n', '\n', '\r', '\n', 
		'\xE', '\n', '\x86', '\x3', '\n', '\x3', '\n', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\f', '\x3', '\f', '\x5', '\f', 
		'\x97', '\n', '\f', '\x3', '\f', '\x5', '\f', '\x9A', '\n', '\f', '\x3', 
		'\f', '\x3', '\f', '\x3', '\f', '\x5', '\f', '\x9F', '\n', '\f', '\x3', 
		'\f', '\x3', '\f', '\x3', '\r', '\x3', '\r', '\a', '\r', '\xA5', '\n', 
		'\r', '\f', '\r', '\xE', '\r', '\xA8', '\v', '\r', '\x3', '\r', '\x3', 
		'\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\a', '\xF', '\xB4', '\n', '\xF', 
		'\f', '\xF', '\xE', '\xF', '\xB7', '\v', '\xF', '\x3', '\xF', '\x3', '\xF', 
		'\x3', '\xF', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x5', '\x10', 
		'\xBF', '\n', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', 
		'\x10', '\a', '\x10', '\xC5', '\n', '\x10', '\f', '\x10', '\xE', '\x10', 
		'\xC8', '\v', '\x10', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', 
		'\x11', '\x3', '\x11', '\x5', '\x11', '\xCF', '\n', '\x11', '\x3', '\x12', 
		'\x3', '\x12', '\x3', '\x13', '\x3', '\x13', '\x3', '\x14', '\x3', '\x14', 
		'\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x5', '\x14', '\xDA', '\n', 
		'\x14', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', 
		'\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x17', '\x3', '\x17', '\x3', 
		'\x17', '\x3', '\x17', '\a', '\x17', '\xE7', '\n', '\x17', '\f', '\x17', 
		'\xE', '\x17', '\xEA', '\v', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', 
		'\x17', '\x2', '\x3', '\x1E', '\x18', '\x2', '\x4', '\x6', '\b', '\n', 
		'\f', '\xE', '\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', 
		' ', '\"', '$', '&', '(', '*', ',', '\x2', '\x4', '\x3', '\x2', '\x15', 
		'\x18', '\x3', '\x2', '\x19', '\x1E', '\x2', '\xF1', '\x2', '.', '\x3', 
		'\x2', '\x2', '\x2', '\x4', '\x37', '\x3', '\x2', '\x2', '\x2', '\x6', 
		'@', '\x3', '\x2', '\x2', '\x2', '\b', 'K', '\x3', '\x2', '\x2', '\x2', 
		'\n', 'N', '\x3', '\x2', '\x2', '\x2', '\f', 'X', '\x3', '\x2', '\x2', 
		'\x2', '\xE', '\x61', '\x3', '\x2', '\x2', '\x2', '\x10', 'r', '\x3', 
		'\x2', '\x2', '\x2', '\x12', 't', '\x3', '\x2', '\x2', '\x2', '\x14', 
		'\x8A', '\x3', '\x2', '\x2', '\x2', '\x16', '\x99', '\x3', '\x2', '\x2', 
		'\x2', '\x18', '\xA2', '\x3', '\x2', '\x2', '\x2', '\x1A', '\xAB', '\x3', 
		'\x2', '\x2', '\x2', '\x1C', '\xAF', '\x3', '\x2', '\x2', '\x2', '\x1E', 
		'\xBE', '\x3', '\x2', '\x2', '\x2', ' ', '\xCE', '\x3', '\x2', '\x2', 
		'\x2', '\"', '\xD0', '\x3', '\x2', '\x2', '\x2', '$', '\xD2', '\x3', '\x2', 
		'\x2', '\x2', '&', '\xD9', '\x3', '\x2', '\x2', '\x2', '(', '\xDB', '\x3', 
		'\x2', '\x2', '\x2', '*', '\xDF', '\x3', '\x2', '\x2', '\x2', ',', '\xE2', 
		'\x3', '\x2', '\x2', '\x2', '.', '\x30', '\x5', '\x4', '\x3', '\x2', '/', 
		'\x31', '\x5', '\x6', '\x4', '\x2', '\x30', '/', '\x3', '\x2', '\x2', 
		'\x2', '\x31', '\x32', '\x3', '\x2', '\x2', '\x2', '\x32', '\x30', '\x3', 
		'\x2', '\x2', '\x2', '\x32', '\x33', '\x3', '\x2', '\x2', '\x2', '\x33', 
		'\x34', '\x3', '\x2', '\x2', '\x2', '\x34', '\x35', '\x5', '\b', '\x5', 
		'\x2', '\x35', '\x36', '\x5', '\n', '\x6', '\x2', '\x36', '\x3', '\x3', 
		'\x2', '\x2', '\x2', '\x37', '\x38', '\a', '\x3', '\x2', '\x2', '\x38', 
		':', '\a', '\x4', '\x2', '\x2', '\x39', ';', '\x5', '\xE', '\b', '\x2', 
		':', '\x39', '\x3', '\x2', '\x2', '\x2', ';', '<', '\x3', '\x2', '\x2', 
		'\x2', '<', ':', '\x3', '\x2', '\x2', '\x2', '<', '=', '\x3', '\x2', '\x2', 
		'\x2', '=', '>', '\x3', '\x2', '\x2', '\x2', '>', '?', '\a', '\x5', '\x2', 
		'\x2', '?', '\x5', '\x3', '\x2', '\x2', '\x2', '@', '\x41', '\a', '\x6', 
		'\x2', '\x2', '\x41', '\x46', '\a', '$', '\x2', '\x2', '\x42', '\x43', 
		'\a', '\a', '\x2', '\x2', '\x43', '\x45', '\a', '$', '\x2', '\x2', '\x44', 
		'\x42', '\x3', '\x2', '\x2', '\x2', '\x45', 'H', '\x3', '\x2', '\x2', 
		'\x2', '\x46', '\x44', '\x3', '\x2', '\x2', '\x2', '\x46', 'G', '\x3', 
		'\x2', '\x2', '\x2', 'G', 'I', '\x3', '\x2', '\x2', '\x2', 'H', '\x46', 
		'\x3', '\x2', '\x2', '\x2', 'I', 'J', '\x5', '\f', '\a', '\x2', 'J', '\a', 
		'\x3', '\x2', '\x2', '\x2', 'K', 'L', '\a', '\b', '\x2', '\x2', 'L', 'M', 
		'\x5', '\x18', '\r', '\x2', 'M', '\t', '\x3', '\x2', '\x2', '\x2', 'N', 
		'O', '\a', '\t', '\x2', '\x2', 'O', 'S', '\a', '\x4', '\x2', '\x2', 'P', 
		'R', '\x5', '\x12', '\n', '\x2', 'Q', 'P', '\x3', '\x2', '\x2', '\x2', 
		'R', 'U', '\x3', '\x2', '\x2', '\x2', 'S', 'Q', '\x3', '\x2', '\x2', '\x2', 
		'S', 'T', '\x3', '\x2', '\x2', '\x2', 'T', 'V', '\x3', '\x2', '\x2', '\x2', 
		'U', 'S', '\x3', '\x2', '\x2', '\x2', 'V', 'W', '\a', '\x5', '\x2', '\x2', 
		'W', '\v', '\x3', '\x2', '\x2', '\x2', 'X', '\\', '\a', '\x4', '\x2', 
		'\x2', 'Y', '[', '\x5', '\xE', '\b', '\x2', 'Z', 'Y', '\x3', '\x2', '\x2', 
		'\x2', '[', '^', '\x3', '\x2', '\x2', '\x2', '\\', 'Z', '\x3', '\x2', 
		'\x2', '\x2', '\\', ']', '\x3', '\x2', '\x2', '\x2', ']', '_', '\x3', 
		'\x2', '\x2', '\x2', '^', '\\', '\x3', '\x2', '\x2', '\x2', '_', '`', 
		'\a', '\x5', '\x2', '\x2', '`', '\r', '\x3', '\x2', '\x2', '\x2', '\x61', 
		'\x62', '\a', '$', '\x2', '\x2', '\x62', '\x63', '\a', '\n', '\x2', '\x2', 
		'\x63', 'h', '\x5', '&', '\x14', '\x2', '\x64', '\x65', '\a', '\a', '\x2', 
		'\x2', '\x65', 'g', '\x5', '&', '\x14', '\x2', '\x66', '\x64', '\x3', 
		'\x2', '\x2', '\x2', 'g', 'j', '\x3', '\x2', '\x2', '\x2', 'h', '\x66', 
		'\x3', '\x2', '\x2', '\x2', 'h', 'i', '\x3', '\x2', '\x2', '\x2', 'i', 
		'k', '\x3', '\x2', '\x2', '\x2', 'j', 'h', '\x3', '\x2', '\x2', '\x2', 
		'k', 'l', '\a', '\v', '\x2', '\x2', 'l', '\xF', '\x3', '\x2', '\x2', '\x2', 
		'm', 's', '\x5', '\x12', '\n', '\x2', 'n', 's', '\x5', '\x14', '\v', '\x2', 
		'o', 's', '\x5', '\x16', '\f', '\x2', 'p', 's', '\x5', '\x18', '\r', '\x2', 
		'q', 's', '\x5', '\x1A', '\xE', '\x2', 'r', 'm', '\x3', '\x2', '\x2', 
		'\x2', 'r', 'n', '\x3', '\x2', '\x2', '\x2', 'r', 'o', '\x3', '\x2', '\x2', 
		'\x2', 'r', 'p', '\x3', '\x2', '\x2', '\x2', 'r', 'q', '\x3', '\x2', '\x2', 
		'\x2', 's', '\x11', '\x3', '\x2', '\x2', '\x2', 't', 'u', '\a', '\f', 
		'\x2', '\x2', 'u', 'x', '\a', '\r', '\x2', '\x2', 'v', 'y', '\a', '\xE', 
		'\x2', '\x2', 'w', 'y', '\x5', '*', '\x16', '\x2', 'x', 'v', '\x3', '\x2', 
		'\x2', '\x2', 'x', 'w', '\x3', '\x2', '\x2', '\x2', 'y', '~', '\x3', '\x2', 
		'\x2', '\x2', 'z', '{', '\a', '\a', '\x2', '\x2', '{', '}', '\x5', '*', 
		'\x16', '\x2', '|', 'z', '\x3', '\x2', '\x2', '\x2', '}', '\x80', '\x3', 
		'\x2', '\x2', '\x2', '~', '|', '\x3', '\x2', '\x2', '\x2', '~', '\x7F', 
		'\x3', '\x2', '\x2', '\x2', '\x7F', '\x81', '\x3', '\x2', '\x2', '\x2', 
		'\x80', '~', '\x3', '\x2', '\x2', '\x2', '\x81', '\x82', '\a', '\xF', 
		'\x2', '\x2', '\x82', '\x84', '\a', '\x4', '\x2', '\x2', '\x83', '\x85', 
		'\x5', '\x1C', '\xF', '\x2', '\x84', '\x83', '\x3', '\x2', '\x2', '\x2', 
		'\x85', '\x86', '\x3', '\x2', '\x2', '\x2', '\x86', '\x84', '\x3', '\x2', 
		'\x2', '\x2', '\x86', '\x87', '\x3', '\x2', '\x2', '\x2', '\x87', '\x88', 
		'\x3', '\x2', '\x2', '\x2', '\x88', '\x89', '\a', '\x5', '\x2', '\x2', 
		'\x89', '\x13', '\x3', '\x2', '\x2', '\x2', '\x8A', '\x8B', '\a', '\x10', 
		'\x2', '\x2', '\x8B', '\x8C', '\a', '\r', '\x2', '\x2', '\x8C', '\x8D', 
		'\x5', '\x1E', '\x10', '\x2', '\x8D', '\x8E', '\a', '\v', '\x2', '\x2', 
		'\x8E', '\x8F', '\x5', '\x1E', '\x10', '\x2', '\x8F', '\x90', '\a', '\v', 
		'\x2', '\x2', '\x90', '\x91', '\x5', '\x1E', '\x10', '\x2', '\x91', '\x92', 
		'\a', '\xF', '\x2', '\x2', '\x92', '\x93', '\x5', '\x10', '\t', '\x2', 
		'\x93', '\x15', '\x3', '\x2', '\x2', '\x2', '\x94', '\x96', '\x5', ',', 
		'\x17', '\x2', '\x95', '\x97', '\x5', '*', '\x16', '\x2', '\x96', '\x95', 
		'\x3', '\x2', '\x2', '\x2', '\x96', '\x97', '\x3', '\x2', '\x2', '\x2', 
		'\x97', '\x9A', '\x3', '\x2', '\x2', '\x2', '\x98', '\x9A', '\a', '$', 
		'\x2', '\x2', '\x99', '\x94', '\x3', '\x2', '\x2', '\x2', '\x99', '\x98', 
		'\x3', '\x2', '\x2', '\x2', '\x9A', '\x9B', '\x3', '\x2', '\x2', '\x2', 
		'\x9B', '\x9E', '\a', '\x11', '\x2', '\x2', '\x9C', '\x9F', '\x5', '\x1E', 
		'\x10', '\x2', '\x9D', '\x9F', '\a', '&', '\x2', '\x2', '\x9E', '\x9C', 
		'\x3', '\x2', '\x2', '\x2', '\x9E', '\x9D', '\x3', '\x2', '\x2', '\x2', 
		'\x9F', '\xA0', '\x3', '\x2', '\x2', '\x2', '\xA0', '\xA1', '\a', '\v', 
		'\x2', '\x2', '\xA1', '\x17', '\x3', '\x2', '\x2', '\x2', '\xA2', '\xA6', 
		'\a', '\x4', '\x2', '\x2', '\xA3', '\xA5', '\x5', '\x10', '\t', '\x2', 
		'\xA4', '\xA3', '\x3', '\x2', '\x2', '\x2', '\xA5', '\xA8', '\x3', '\x2', 
		'\x2', '\x2', '\xA6', '\xA4', '\x3', '\x2', '\x2', '\x2', '\xA6', '\xA7', 
		'\x3', '\x2', '\x2', '\x2', '\xA7', '\xA9', '\x3', '\x2', '\x2', '\x2', 
		'\xA8', '\xA6', '\x3', '\x2', '\x2', '\x2', '\xA9', '\xAA', '\a', '\x5', 
		'\x2', '\x2', '\xAA', '\x19', '\x3', '\x2', '\x2', '\x2', '\xAB', '\xAC', 
		'\a', '\x12', '\x2', '\x2', '\xAC', '\xAD', '\x5', '\x1E', '\x10', '\x2', 
		'\xAD', '\xAE', '\a', '\v', '\x2', '\x2', '\xAE', '\x1B', '\x3', '\x2', 
		'\x2', '\x2', '\xAF', '\xB0', '\a', '\x13', '\x2', '\x2', '\xB0', '\xB5', 
		'\x5', '&', '\x14', '\x2', '\xB1', '\xB2', '\a', '\a', '\x2', '\x2', '\xB2', 
		'\xB4', '\x5', '&', '\x14', '\x2', '\xB3', '\xB1', '\x3', '\x2', '\x2', 
		'\x2', '\xB4', '\xB7', '\x3', '\x2', '\x2', '\x2', '\xB5', '\xB3', '\x3', 
		'\x2', '\x2', '\x2', '\xB5', '\xB6', '\x3', '\x2', '\x2', '\x2', '\xB6', 
		'\xB8', '\x3', '\x2', '\x2', '\x2', '\xB7', '\xB5', '\x3', '\x2', '\x2', 
		'\x2', '\xB8', '\xB9', '\a', '\x14', '\x2', '\x2', '\xB9', '\xBA', '\x5', 
		'\x10', '\t', '\x2', '\xBA', '\x1D', '\x3', '\x2', '\x2', '\x2', '\xBB', 
		'\xBC', '\b', '\x10', '\x1', '\x2', '\xBC', '\xBF', '\a', '$', '\x2', 
		'\x2', '\xBD', '\xBF', '\x5', '*', '\x16', '\x2', '\xBE', '\xBB', '\x3', 
		'\x2', '\x2', '\x2', '\xBE', '\xBD', '\x3', '\x2', '\x2', '\x2', '\xBF', 
		'\xC6', '\x3', '\x2', '\x2', '\x2', '\xC0', '\xC1', '\f', '\x3', '\x2', 
		'\x2', '\xC1', '\xC2', '\x5', '$', '\x13', '\x2', '\xC2', '\xC3', '\x5', 
		'\x1E', '\x10', '\x4', '\xC3', '\xC5', '\x3', '\x2', '\x2', '\x2', '\xC4', 
		'\xC0', '\x3', '\x2', '\x2', '\x2', '\xC5', '\xC8', '\x3', '\x2', '\x2', 
		'\x2', '\xC6', '\xC4', '\x3', '\x2', '\x2', '\x2', '\xC6', '\xC7', '\x3', 
		'\x2', '\x2', '\x2', '\xC7', '\x1F', '\x3', '\x2', '\x2', '\x2', '\xC8', 
		'\xC6', '\x3', '\x2', '\x2', '\x2', '\xC9', '\xCF', '\a', '%', '\x2', 
		'\x2', '\xCA', '\xCB', '\x5', '\x1E', '\x10', '\x2', '\xCB', '\xCC', '\x5', 
		'\"', '\x12', '\x2', '\xCC', '\xCD', '\x5', '\x1E', '\x10', '\x2', '\xCD', 
		'\xCF', '\x3', '\x2', '\x2', '\x2', '\xCE', '\xC9', '\x3', '\x2', '\x2', 
		'\x2', '\xCE', '\xCA', '\x3', '\x2', '\x2', '\x2', '\xCF', '!', '\x3', 
		'\x2', '\x2', '\x2', '\xD0', '\xD1', '\t', '\x2', '\x2', '\x2', '\xD1', 
		'#', '\x3', '\x2', '\x2', '\x2', '\xD2', '\xD3', '\t', '\x3', '\x2', '\x2', 
		'\xD3', '%', '\x3', '\x2', '\x2', '\x2', '\xD4', '\xDA', '\x5', '(', '\x15', 
		'\x2', '\xD5', '\xDA', '\a', '%', '\x2', '\x2', '\xD6', '\xDA', '\a', 
		'&', '\x2', '\x2', '\xD7', '\xDA', '\a', '$', '\x2', '\x2', '\xD8', '\xDA', 
		'\a', '\x1F', '\x2', '\x2', '\xD9', '\xD4', '\x3', '\x2', '\x2', '\x2', 
		'\xD9', '\xD5', '\x3', '\x2', '\x2', '\x2', '\xD9', '\xD6', '\x3', '\x2', 
		'\x2', '\x2', '\xD9', '\xD7', '\x3', '\x2', '\x2', '\x2', '\xD9', '\xD8', 
		'\x3', '\x2', '\x2', '\x2', '\xDA', '\'', '\x3', '\x2', '\x2', '\x2', 
		'\xDB', '\xDC', '\a', ' ', '\x2', '\x2', '\xDC', '\xDD', '\a', '!', '\x2', 
		'\x2', '\xDD', '\xDE', '\a', '%', '\x2', '\x2', '\xDE', ')', '\x3', '\x2', 
		'\x2', '\x2', '\xDF', '\xE0', '\a', '\"', '\x2', '\x2', '\xE0', '\xE1', 
		'\a', '$', '\x2', '\x2', '\xE1', '+', '\x3', '\x2', '\x2', '\x2', '\xE2', 
		'\xE3', '\a', '#', '\x2', '\x2', '\xE3', '\xE8', '\x5', ' ', '\x11', '\x2', 
		'\xE4', '\xE5', '\a', '\a', '\x2', '\x2', '\xE5', '\xE7', '\x5', ' ', 
		'\x11', '\x2', '\xE6', '\xE4', '\x3', '\x2', '\x2', '\x2', '\xE7', '\xEA', 
		'\x3', '\x2', '\x2', '\x2', '\xE8', '\xE6', '\x3', '\x2', '\x2', '\x2', 
		'\xE8', '\xE9', '\x3', '\x2', '\x2', '\x2', '\xE9', '\xEB', '\x3', '\x2', 
		'\x2', '\x2', '\xEA', '\xE8', '\x3', '\x2', '\x2', '\x2', '\xEB', '\xEC', 
		'\a', '\x14', '\x2', '\x2', '\xEC', '-', '\x3', '\x2', '\x2', '\x2', '\x16', 
		'\x32', '<', '\x46', 'S', '\\', 'h', 'r', 'x', '~', '\x86', '\x96', '\x99', 
		'\x9E', '\xA6', '\xB5', '\xBE', '\xC6', '\xCE', '\xD9', '\xE8',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
