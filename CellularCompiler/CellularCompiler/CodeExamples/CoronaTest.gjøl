GRID
{
   x: 15;
   y: 15;
}

STATES dead, alive
{
   test: 1 -> 10, "n";
}

INITIAL
{
   grid[1,2] = alive;
   grid[2,3] = alive;
   grid[3,1] = alive;
   grid[3,2] = alive;
   grid[3,3] = alive;
}

RULES
{
   count = 0;
   r = -1;
   while (r < 2)
   {
      c = -1;
      while (c < 2)
      {
         match (grid[.x+r, .y+c], r, c)
         {
            [alive, 0, 0]
            {}
            [alive, _, _]
               count = count + 1;
         }
         c = c + 1;
      }
      r = r + 1;
   }

   match (.state, count)
   {
      [alive, 2 -> 3]
         return alive;
      [dead, 3]
         return alive;
      [_, _]
         return dead;
   }
}

# .out #
FUNC #NAME#(#ARGS#)
{
   # Do some computations #

   .out = result_of_computation;
}